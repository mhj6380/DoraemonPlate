{"ast":null,"code":"import axios from \"axios\";\nimport { BACKEND_URL } from '../config'; // 쿠키로 변경예정 \n// const token = \"token\";\n\nconst customAxios = axios.create({\n  baseURL: BACKEND_URL // 로그인 여부에 따라 Authorization 헤더를 조정하자\n  // headers: { 'Authorization': `Bearer ${token}` },\n\n});\ncustomAxios.interceptors.response.use(function (response) {\n  // 응답 데이터를 가공\n  // ...\n  alert(\"잘되누\");\n  return response;\n}, function (error) {\n  // 오류 응답을 처리\n  if (error.response) {\n    // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n    console.log(error.response.status);\n    console.log(error.response.headers);\n    alert(error.response.data.message);\n    return;\n  } else if (error.request) {\n    // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n    // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n    // Node.js의 http.ClientRequest 인스턴스입니다.\n    console.log(error.request);\n  } else {\n    // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n    console.log('Error', error.message);\n  }\n\n  console.log(error.config);\n  return Promise.reject(error);\n});\nexport default customAxios;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/util/axios.ts"],"names":["axios","BACKEND_URL","customAxios","create","baseURL","interceptors","response","use","alert","error","console","log","status","headers","data","message","request","config","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,WAA5B,C,CAEA;AACA;;AAEA,MAAMC,WAAW,GAAGF,KAAK,CAACG,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAEH,WADsB,CAE/B;AACA;;AAH+B,CAAb,CAApB;AAMAC,WAAW,CAACG,YAAZ,CAAyBC,QAAzB,CAAkCC,GAAlC,CACI,UAAUD,QAAV,EAAoB;AAClB;AACA;AACFE,EAAAA,KAAK,CAAC,KAAD,CAAL;AACE,SAAOF,QAAP;AACD,CANL,EAOI,UAAUG,KAAV,EAAiB;AACf;AACA,MAAIA,KAAK,CAACH,QAAV,EAAoB;AAClB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,QAAN,CAAeM,MAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACH,QAAN,CAAeO,OAA3B;AACAL,IAAAA,KAAK,CAACC,KAAK,CAACH,QAAN,CAAeQ,IAAf,CAAoBC,OAArB,CAAL;AACA;AACD,GAND,MAOK,IAAIN,KAAK,CAACO,OAAV,EAAmB;AACtB;AACA;AACA;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACO,OAAlB;AACD,GALI,MAMA;AACH;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAAK,CAACM,OAA3B;AACD;;AACDL,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACQ,MAAlB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeV,KAAf,CAAP;AACD,CA5BL;AA6BA,eAAeP,WAAf","sourcesContent":["import axios from \"axios\";\nimport { BACKEND_URL } from '../config';\n\n// 쿠키로 변경예정 \n// const token = \"token\";\n\nconst customAxios = axios.create({\n  baseURL: BACKEND_URL,   \n  // 로그인 여부에 따라 Authorization 헤더를 조정하자\n  // headers: { 'Authorization': `Bearer ${token}` },\n});\n\ncustomAxios.interceptors.response.use(\n    function (response) {\n      // 응답 데이터를 가공\n      // ...\n    alert(\"잘되누\");\n      return response;\n    },\n    function (error) {\n      // 오류 응답을 처리\n      if (error.response) {\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        console.log(error.response.status);\n        console.log(error.response.headers);\n        alert(error.response.data.message); \n        return;\n      }\n      else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n        // Node.js의 http.ClientRequest 인스턴스입니다.\n        console.log(error.request);\n      }\n      else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log('Error', error.message);\n      }\n      console.log(error.config);\n      return Promise.reject(error);\n    });\nexport default customAxios;"]},"metadata":{},"sourceType":"module"}