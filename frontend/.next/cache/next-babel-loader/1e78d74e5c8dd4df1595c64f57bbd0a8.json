{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/pages/board/write.tsx\";\nimport { useState } from 'react';\nimport styled from 'styled-components';\nimport TransitionLayout from 'components/layout/TransitionLayout'; // import QuillEditorField from 'components/form/QuillEditorField';\n\nimport Editor from 'components/form/QuilTest'; // import draftToHtml from 'draftjs-to-html';\n\nimport BasicTextField from 'components/form/material/BasicTextField'; // import { EditorState, convertToRaw } from 'draft-js';\n\nimport { Formik, Form } from 'formik';\nimport axios from 'util/axios';\nimport { BACKEND_URL } from 'config';\nimport BasicSubmitBtn from 'components/tools/BasicSubmitBtn';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport { useRouter } from 'next/router';\nconst BoardWriteWrapper = styled.div.withConfig({\n  displayName: \"write__BoardWriteWrapper\",\n  componentId: \"iq95sf-0\"\n})([\"width:100%;height:100%;display:flex;flex-flow:row wrap;\"]);\n\nconst BoardWritePage = ({}) => {\n  const me = useAuthState(); // const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const Router = useRouter();\n  const {\n    0: content,\n    1: setContent\n  } = useState('');\n  return /*#__PURE__*/_jsxDEV(TransitionLayout, {\n    children: /*#__PURE__*/_jsxDEV(BoardWriteWrapper, {\n      children: /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            title: '',\n            content: '',\n            tags: [{\n              tag_name: ''\n            }]\n          },\n          validate: values => {\n            const errors = {};\n            const images = content.match(/<img[^>]*src=[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>/g);\n\n            if (images.length > 0) {\n              for (var i = 0; i < images.length; i++) {\n                const test = images[i].replace('<img src=\"', '');\n                console.log('GEN', test);\n              }\n            }\n\n            console.log(content.match(/<img[^>]*src=[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>/g));\n\n            if (values.title === '') {\n              errors.title = '제목을 입력해주세요.';\n            } // if (values.content === '') {\n            //   errors.content = '내용을 입력해주세요.';\n            // }\n\n\n            return errors;\n          },\n          onSubmit: (data, {\n            setSubmitting\n          }) => {\n            setSubmitting(true);\n            setLoading(true); // const editorToHtml = draftToHtml(\n            //   convertToRaw(editorState.getCurrentContent())\n            // );\n\n            axios.post(`${BACKEND_URL}/board`, {\n              title: data.title,\n              // content: editorToHtml.toString(),\n              content: '작업중',\n              author: me.userInfo.user_id,\n              thumbnail: '',\n              tags: 'tag',\n              topic: 'default'\n            }).then(res => {\n              Router.push(`/board/${res.data.id}`);\n            });\n            setSubmitting(false);\n          },\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            style: {\n              width: '100%'\n            },\n            children: [/*#__PURE__*/_jsxDEV(BasicTextField, {\n              name: \"title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Editor, {\n              val: content,\n              setVal: setContent\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(BasicSubmitBtn, {\n              text: \"\\uC791\\uC131\\uC644\\uB8CC\",\n              loading: loading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n\nexport default BoardWritePage;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/pages/board/write.tsx"],"names":["useState","styled","TransitionLayout","Editor","BasicTextField","Formik","Form","axios","BACKEND_URL","BasicSubmitBtn","useAuthState","useRouter","BoardWriteWrapper","div","BoardWritePage","me","loading","setLoading","Router","content","setContent","title","tags","tag_name","values","errors","images","match","length","i","test","replace","console","log","data","setSubmitting","post","author","userInfo","user_id","thumbnail","topic","then","res","push","id","width"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport styled from 'styled-components';\nimport TransitionLayout from 'components/layout/TransitionLayout';\n\n// import QuillEditorField from 'components/form/QuillEditorField';\nimport Editor from 'components/form/QuilTest';\n\n// import draftToHtml from 'draftjs-to-html';\nimport BasicTextField from 'components/form/material/BasicTextField';\n// import { EditorState, convertToRaw } from 'draft-js';\nimport { Formik, Form } from 'formik';\nimport axios from 'util/axios';\nimport { BACKEND_URL } from 'config';\nimport BasicSubmitBtn from 'components/tools/BasicSubmitBtn';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport { useRouter } from 'next/router';\n\nconst BoardWriteWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-flow: row wrap;\n`;\n\ninterface Props {}\n\nconst BoardWritePage = ({}: Props): JSX.Element => {\n  const me = useAuthState();\n\n  // const [editorState, setEditorState] = useState(EditorState.createEmpty());\n\n  const [loading, setLoading] = useState(false);\n  const Router = useRouter();\n  const [content, setContent] = useState('');\n\n  return (\n    <TransitionLayout>\n      <BoardWriteWrapper>\n        <>\n          <Formik\n            initialValues={{\n              title: '',\n              content: '',\n              tags: [\n                {\n                  tag_name: '',\n                },\n              ],\n            }}\n            validate={(values) => {\n              const errors: Record<string, string> = {};\n\n              const images = content.match(\n                /<img[^>]*src=[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>/g\n              );\n              if (images.length > 0) {\n                for (var i = 0; i < images.length; i++) {\n                  const test = images[i].replace('<img src=\"', '');\n                  console.log('GEN', test);\n                }\n              }\n\n              console.log(\n                content.match(/<img[^>]*src=[\\\"']?([^>\\\"']+)[\\\"']?[^>]*>/g)\n              );\n\n              if (values.title === '') {\n                errors.title = '제목을 입력해주세요.';\n              }\n\n              // if (values.content === '') {\n              //   errors.content = '내용을 입력해주세요.';\n              // }\n\n              return errors;\n            }}\n            onSubmit={(data, { setSubmitting }) => {\n              setSubmitting(true);\n              setLoading(true);\n              // const editorToHtml = draftToHtml(\n              //   convertToRaw(editorState.getCurrentContent())\n              // );\n              axios\n                .post(`${BACKEND_URL}/board`, {\n                  title: data.title,\n                  // content: editorToHtml.toString(),\n                  content: '작업중',\n                  author: me.userInfo.user_id,\n                  thumbnail: '',\n                  tags: 'tag',\n                  topic: 'default',\n                })\n                .then((res: any) => {\n                  Router.push(`/board/${res.data.id}`);\n                });\n\n              setSubmitting(false);\n            }}\n          >\n            <Form style={{ width: '100%' }}>\n              <BasicTextField name=\"title\" />\n\n              <Editor val={content} setVal={setContent} />\n              {/* 수정모드일때만  */}\n\n              <BasicSubmitBtn text=\"작성완료\" loading={loading} />\n            </Form>\n          </Formik>\n        </>\n      </BoardWriteWrapper>\n    </TransitionLayout>\n  );\n};\n\nexport default BoardWritePage;\n"]},"metadata":{},"sourceType":"module"}