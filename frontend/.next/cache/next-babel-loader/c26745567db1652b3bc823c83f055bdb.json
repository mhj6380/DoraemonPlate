{"ast":null,"code":"import _toConsumableArray from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useContext, createContext, useEffect } from \"react\";\nimport { SocketContext } from './socketContext'; // 필요한 타입들을 미리 선언 \n// 상태를 위한 타입\n\n// Context 만들기\nvar ChatStateContext = /*#__PURE__*/createContext(null);\nvar ChatDispatchContext = /*#__PURE__*/createContext(null); // 리듀서\n\nfunction reducer(state, action) {\n  _s();\n\n  var socket = useContext(SocketContext);\n\n  switch (action.type) {\n    case \"JOIN_ROOM\":\n      socket.emit('joinRoom');\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inRoomKey: action.payload\n      });\n\n    case \"SET_ROOM_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        roomList: action.payload // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n\n      });\n\n    case \"SET_CHAT_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inRoomKey: action.inRoomKey,\n        chatList: action.payload\n      });\n\n    case \"PUSH_CHAT_LIST\":\n      var newChats = [].concat(_toConsumableArray(state.chatList), [action.payload]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: newChats\n      });\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n} // AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\n\n\n_s(reducer, \"0R2d+Tq5R59clvH3S7Q6dYnlbX0=\");\n\nexport var ChatProvider = function ChatProvider(_ref) {\n  _s2();\n\n  var children = _ref.children;\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  var socket = useContext(SocketContext);\n  useEffect(function () {\n    if (!socket) return;\n    socket.on('msgToClient', function (payload) {\n      // 채팅 메세지 수신   \n      dispatch({\n        type: 'PUSH_CHAT_LIST',\n        payload: payload\n      });\n    });\n\n    function disconnect() {\n      console.log(\"[received] disconnect\");\n      socket.once(\"reconnect\", function () {\n        console.log(\"[reconnected]\");\n      });\n    } // 소켓 연결이 끉길경우 다시 연결 (아직 검증되지 않음) \n\n\n    socket.on(\"disconnect\", function () {\n      disconnect();\n      return;\n    });\n  }, []);\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = [];\n\n  var _useReducer = useReducer(reducer, {\n    inRoomKey: inRoomKey,\n    roomList: roomList,\n    chatList: chatList\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return /*#__PURE__*/_jsxDEV(ChatStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(ChatDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, _this);\n}; // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n\n_s2(ChatProvider, \"ZqYg6We6aLI3DxMxuO5GoBLsQtI=\");\n\n_c = ChatProvider;\nexport function useChatState() {\n  _s3();\n\n  var state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\n\n_s3(useChatState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useChatDispatch() {\n  _s4();\n\n  var dispatch = useContext(ChatDispatchContext);\n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}\n\n_s4(useChatDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx"],"names":["React","useReducer","useContext","createContext","useEffect","SocketContext","ChatStateContext","ChatDispatchContext","reducer","state","action","socket","type","emit","inRoomKey","payload","roomList","chatList","newChats","Error","ChatProvider","children","on","dispatch","disconnect","console","log","once","useChatState","useChatDispatch"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext, createContext, Dispatch, useEffect } from \"react\";\nimport { TRoom, TChatMessage } from \"../../types/chat\"; \nimport { SocketContext } from './socketContext';  \n\n// 필요한 타입들을 미리 선언 \n\n// 상태를 위한 타입\ntype State = { \n  inRoomKey: string;\n  roomList: TRoom[];\n  chatList: TChatMessage[]; \n};\n\n// 모든 액션들을 위한 타입\ntype Action =\n  | { type: \"JOIN_ROOM\"; payload: string }\n  | { type: \"SET_ROOM_LIST\"; payload: TRoom[] }\n  | { type: \"SET_CHAT_LIST\"; payload: TChatMessage[]; inRoomKey: string }\n  | { type: \"PUSH_CHAT_LIST\"; payload: TChatMessage;};  \n \n// 디스패치를 위한 타입 (Dispatch 를 리액트에서 불러올 수 있음), 액션들의 타입을 Dispatch 의 Generics로 설정\ntype AuthDispatch = Dispatch<Action>;\n\n// Context 만들기\nconst ChatStateContext = createContext<any | null>(null);\nconst ChatDispatchContext = createContext<AuthDispatch | null>(null);\n\n// 리듀서\nfunction reducer(state: State, action: Action): State {\n  const socket = useContext(SocketContext);\n  \n  switch (action.type) {\n    case \"JOIN_ROOM\":\n      socket.emit('joinRoom')\n      return {\n        ...state,\n        inRoomKey: action.payload, \n      };\n\n    case \"SET_ROOM_LIST\":\n      return {\n        ...state,\n        roomList: action.payload, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n\n    \n    case \"SET_CHAT_LIST\":  \n      return {\n        ...state,\n        inRoomKey: action.inRoomKey,\n        chatList: action.payload,  \n      };\n\n      case \"PUSH_CHAT_LIST\":  \n      const newChats = [...state.chatList, action.payload];\n\n      return {\n        ...state,\n        chatList: newChats,  \n      };\n    \n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\n// AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => { \n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  const socket = useContext(SocketContext);\n  \n  useEffect(() => { \n    if (!socket) return;\n\n    socket.on('msgToClient', (payload: TChatMessage) => {\n      // 채팅 메세지 수신   \n      dispatch({ type: 'PUSH_CHAT_LIST', payload })\n    });\n\n    function disconnect() {\n      console.log(\"[received] disconnect\");\n      socket.once(\"reconnect\", () => {\n        console.log(\"[reconnected]\");\n      });\n    }\n\n    // 소켓 연결이 끉길경우 다시 연결 (아직 검증되지 않음) \n    socket.on(\"disconnect\", () => {\n      disconnect();\n      return;\n    });\n  },[])\n\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = []; \n\n  const [state, dispatch] = useReducer(reducer, {\n    inRoomKey,\n    roomList,  \n    chatList\n  });\n\n  return (\n    <ChatStateContext.Provider value={state}>\n      <ChatDispatchContext.Provider value={dispatch}> \n        {children}\n      </ChatDispatchContext.Provider>\n    </ChatStateContext.Provider>\n  );\n};\n\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\nexport function useChatState() {\n  const state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return state;\n} \n \nexport function useChatDispatch() { \n  const dispatch = useContext(ChatDispatchContext); \n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return dispatch;\n}\n"]},"metadata":{},"sourceType":"module"}