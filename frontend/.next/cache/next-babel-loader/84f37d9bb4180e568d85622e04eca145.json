{"ast":null,"code":"import axios from \"axios\";\nvar customAxios = axios.create({\n  baseURL: 'http://localhost:8080/'\n});\ncustomAxios.interceptors.response.use( // function (response) {\n//   // 응답 데이터를 가공\n//   // ...\n// alert(\"잘되누\");\n//   return response;\n// },\nfunction (error) {\n  // 오류 응답을 처리\n  if (error.response) {\n    // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n  } else if (error.request) {\n    // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n    // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n    // Node.js의 http.ClientRequest 인스턴스입니다.\n    console.log(error.request);\n  } else {\n    // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n    console.log('Error', error.message);\n  }\n\n  console.log(error.config); // return Promise.reject(error);\n});\nexport default customAxios;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/util/axios.ts"],"names":["axios","customAxios","create","baseURL","interceptors","response","use","error","console","log","data","status","headers","request","message","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAb,CAApB;AAIAF,WAAW,CAACG,YAAZ,CAAyBC,QAAzB,CAAkCC,GAAlC,EACI;AACA;AACA;AACA;AACA;AACA;AACA,UAAUC,KAAV,EAAqB;AACnB;AACA,MAAIA,KAAK,CAACF,QAAV,EAAoB;AAClB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,QAAN,CAAeK,IAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,QAAN,CAAeM,MAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACF,QAAN,CAAeO,OAA3B;AACD,GALD,MAMK,IAAIL,KAAK,CAACM,OAAV,EAAmB;AACtB;AACA;AACA;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACM,OAAlB;AACD,GALI,MAMA;AACH;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAAK,CAACO,OAA3B;AACD;;AACHN,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACQ,MAAlB,EAlBqB,CAoBnB;AACD,CA5BL;AA6BA,eAAed,WAAf","sourcesContent":["import axios from \"axios\";\n\nconst customAxios = axios.create({\n  baseURL: 'http://localhost:8080/',  \n});\n\ncustomAxios.interceptors.response.use(\n    // function (response) {\n    //   // 응답 데이터를 가공\n    //   // ...\n    // alert(\"잘되누\");\n    //   return response;\n    // },\n    function (error:any) { \n      // 오류 응답을 처리\n      if (error.response) {\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        console.log(error.response.data);\n        console.log(error.response.status);\n        console.log(error.response.headers);\n      }\n      else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n        // Node.js의 http.ClientRequest 인스턴스입니다.\n        console.log(error.request);\n      }\n      else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log('Error', error.message);\n      }\n    console.log(error.config);\n    \n      // return Promise.reject(error);\n    });\nexport default customAxios;"]},"metadata":{},"sourceType":"module"}