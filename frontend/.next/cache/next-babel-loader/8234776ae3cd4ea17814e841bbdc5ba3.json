{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, useContext, createContext, useEffect } from \"react\";\nimport { SocketContext } from './socketContext'; // 필요한 타입들을 미리 선언 \n// 상태를 위한 타입\n\n// Context 만들기\nconst ChatStateContext = /*#__PURE__*/createContext(null);\nconst ChatDispatchContext = /*#__PURE__*/createContext(null); // 리듀서\n\nfunction reducer(state, action) {\n  const socket = useContext(SocketContext);\n\n  switch (action.type) {\n    // 채팅방 입장 시 발동. \n    case \"JOIN_ROOM\":\n      socket.emit('joinRoom', {\n        room_key: action.payload\n      });\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inRoomKey: action.payload\n      });\n\n    case \"SEND_MESSAGE\":\n      const newSendChats = [...state.chatList, action.payload];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: newSendChats\n      });\n\n    case \"SET_ROOM_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        roomList: action.payload // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n\n      });\n\n    case \"SET_CHAT_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inRoomKey: action.inRoomKey,\n        chatList: action.payload\n      });\n    // 메세지를 수신받을 때 발동한다.\n\n    case \"PUSH_CHAT_LIST\":\n      const newChats = [...state.chatList, action.payload];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: newChats\n      });\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n} // AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\n\n\nexport const ChatProvider = ({\n  children\n}) => {\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  const socket = useContext(SocketContext);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on('msgToClient', payload => {\n      // 채팅 메세지 수신   \n      dispatch({\n        type: 'PUSH_CHAT_LIST',\n        payload\n      });\n    });\n\n    function disconnect() {\n      console.log(\"[received] disconnect\");\n      socket.once(\"reconnect\", () => {\n        console.log(\"[reconnected]\");\n      });\n    } // 소켓 연결이 끉길경우 다시 연결 (아직 검증되지 않음) \n\n\n    socket.on(\"disconnect\", () => {\n      disconnect();\n      return;\n    });\n  }, []);\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = [];\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, {\n    inRoomKey,\n    roomList,\n    chatList\n  });\n  return /*#__PURE__*/_jsxDEV(ChatStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(ChatDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n}; // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n\nexport function useChatState() {\n  const state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\nexport function useChatDispatch() {\n  const dispatch = useContext(ChatDispatchContext);\n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx"],"names":["React","useReducer","useContext","createContext","useEffect","SocketContext","ChatStateContext","ChatDispatchContext","reducer","state","action","socket","type","emit","room_key","payload","inRoomKey","newSendChats","chatList","roomList","newChats","Error","ChatProvider","children","on","dispatch","disconnect","console","log","once","useChatState","useChatDispatch"],"mappings":"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","sourcesContent":["import React, { useReducer, useContext, createContext, Dispatch, useEffect } from \"react\";\nimport { TRoom, TChatMessage } from \"../../types/chat\"; \nimport { SocketContext } from './socketContext';  \n\n// 필요한 타입들을 미리 선언 \n\n// 상태를 위한 타입\ntype State = { \n  inRoomKey: string;\n  roomList: TRoom[];\n  chatList: TChatMessage[]; \n};\n\n// 모든 액션들을 위한 타입\ntype Action =\n  | { type: \"JOIN_ROOM\"; payload: string }\n  | { type: \"SEND_MESSAGE\"; payload: TChatMessage; }\n  | { type: \"SET_ROOM_LIST\"; payload: TRoom[] }\n  | { type: \"SET_CHAT_LIST\"; payload: TChatMessage[]; inRoomKey: string }\n  | { type: \"PUSH_CHAT_LIST\"; payload: TChatMessage;};  \n \n// 디스패치를 위한 타입 (Dispatch 를 리액트에서 불러올 수 있음), 액션들의 타입을 Dispatch 의 Generics로 설정\ntype AuthDispatch = Dispatch<Action>;\n\n// Context 만들기\nconst ChatStateContext = createContext<any | null>(null);\nconst ChatDispatchContext = createContext<AuthDispatch | null>(null);\n\n// 리듀서\nfunction reducer(state: State, action: Action): State {\n  const socket = useContext(SocketContext);\n  \n  switch (action.type) {\n    // 채팅방 입장 시 발동. \n    case \"JOIN_ROOM\":\n      socket.emit('joinRoom', { room_key: action.payload });\n      return {\n        ...state,\n        inRoomKey: action.payload, \n      };\n    \n    case \"SEND_MESSAGE\":\n      const newSendChats = [...state.chatList, action.payload];\n      return {\n        ...state,\n        chatList: newSendChats,  \n    };\n    \n    case \"SET_ROOM_LIST\":\n      return {\n        ...state,\n        roomList: action.payload, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n\n    \n    case \"SET_CHAT_LIST\":  \n      return {\n        ...state,\n        inRoomKey: action.inRoomKey,\n        chatList: action.payload,  \n      };\n\n      // 메세지를 수신받을 때 발동한다.\n      case \"PUSH_CHAT_LIST\":  \n      const newChats = [...state.chatList, action.payload];\n\n      return {\n        ...state,\n        chatList: newChats,  \n      };\n    \n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\n// AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => { \n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  const socket = useContext(SocketContext);\n  \n  useEffect(() => { \n    if (!socket) return;\n\n    socket.on('msgToClient', (payload: TChatMessage) => {\n      // 채팅 메세지 수신   \n      dispatch({ type: 'PUSH_CHAT_LIST', payload })\n    });\n\n    function disconnect() {\n      console.log(\"[received] disconnect\");\n      socket.once(\"reconnect\", () => {\n        console.log(\"[reconnected]\");\n      });\n    }\n\n    // 소켓 연결이 끉길경우 다시 연결 (아직 검증되지 않음) \n    socket.on(\"disconnect\", () => {\n      disconnect();\n      return;\n    });\n  },[])\n\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = []; \n\n  const [state, dispatch] = useReducer(reducer, {\n    inRoomKey,\n    roomList,  \n    chatList\n  });\n\n  return (\n    <ChatStateContext.Provider value={state}>\n      <ChatDispatchContext.Provider value={dispatch}> \n        {children}\n      </ChatDispatchContext.Provider>\n    </ChatStateContext.Provider>\n  );\n};\n\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\nexport function useChatState() {\n  const state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return state;\n} \n \nexport function useChatDispatch() { \n  const dispatch = useContext(ChatDispatchContext); \n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return dispatch;\n}\n"]},"metadata":{},"sourceType":"module"}