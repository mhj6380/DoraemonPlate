{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/pages/dm/[partner_id].tsx\";\nimport React, { useEffect, useState } from 'react';\nimport TransitionLayout from \"components/layout/TransitionLayout\";\nimport { useRouter } from \"next/router\";\nimport styled from \"styled-components\";\nimport { useChatDispatch } from \"lib/providers/chatProvider\";\nimport ChatList from 'components/chat/ChatList';\nimport ChatForm from 'components/chat/ChatForm';\nimport { useChatState } from 'lib/providers/chatProvider';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport dayjs from 'dayjs';\nimport useSWR from 'swr';\nimport { BACKEND_URL } from 'config';\nimport axios from 'axios';\nconst DirectMessageWrapper = styled.div.withConfig({\n  displayName: \"partner_id__DirectMessageWrapper\",\n  componentId: \"sc-4pw1eg-0\"\n})([\"width:100%;height:100%;display:flex;flex-flow:row wrap;\"]);\n\nconst DirectMessage = ({}) => {\n  const router = useRouter();\n  const {\n    partner_id\n  } = router.query;\n  const dispatch = useChatDispatch();\n  const chat = useChatState();\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const me = useAuthState();\n  const usersArr = [me.userInfo.user_id, partner_id];\n  usersArr.sort();\n  const room_key = `${usersArr[0]}:${usersArr[1]}`;\n\n  const fetcher = async url => {\n    const resp = await axios.get(url);\n    return resp.data;\n  };\n\n  const {\n    data,\n    mutate,\n    error\n  } = useSWR(`${BACKEND_URL}/chat/message/${room_key}`, fetcher);\n\n  const test = () => {\n    const currentCache = data;\n    mutate([...data, {\n      \"id\": 16,\n      \"room_key\": \"111857151517954391058:ttt24522\",\n      \"message\": \"파하\",\n      \"from_user\": \"test\",\n      \"to_user\": \"test\",\n      \"nickname\": \"\",\n      \"profile\": \"\",\n      \"insert_datetime\": \"2021-02-15T12:01:49.000Z\",\n      \"message_type\": \"text\",\n      \"source\": \"\"\n    }], false);\n  };\n\n  useEffect(() => {\n    if (!partner_id) return;\n    dispatch({\n      type: \"JOIN_ROOM\",\n      payload: room_key\n    });\n  }, []);\n\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const {\n      nickname,\n      profile,\n      user_id\n    } = me.userInfo;\n    const payload = {\n      room_key,\n      nickname,\n      profile,\n      insert_datetime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n      message,\n      source: '',\n      message_type: 'text',\n      from_user: user_id,\n      to_user: partner_id.toString()\n    };\n    dispatch({\n      type: \"SEND_MESSAGE\",\n      payload\n    });\n    setMessage('');\n  };\n\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ERROR\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(TransitionLayout, {\n    title: \"\\uCC44\\uD305\",\n    requiredLogin: true,\n    children: /*#__PURE__*/_jsxDEV(DirectMessageWrapper, {\n      children: [JSON.stringify(data), \"partner_id : \", partner_id, JSON.stringify(me.userInfo.user_id), /*#__PURE__*/_jsxDEV(ChatList, {\n        datas: chat.chatList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatForm, {\n        message: message,\n        setMessage: setMessage,\n        handleSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: test,\n        children: \"MUTATE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DirectMessage;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/pages/dm/[partner_id].tsx"],"names":["React","useEffect","useState","TransitionLayout","useRouter","styled","useChatDispatch","ChatList","ChatForm","useChatState","useAuthState","dayjs","useSWR","BACKEND_URL","axios","DirectMessageWrapper","div","DirectMessage","router","partner_id","query","dispatch","chat","message","setMessage","me","usersArr","userInfo","user_id","sort","room_key","fetcher","url","resp","get","data","mutate","error","test","currentCache","type","payload","handleSendMessage","e","preventDefault","nickname","profile","insert_datetime","format","source","message_type","from_user","to_user","toString","JSON","stringify","chatList"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from 'react';\nimport TransitionLayout from \"components/layout/TransitionLayout\";\nimport { useRouter } from \"next/router\";\nimport styled from \"styled-components\";\nimport { useChatDispatch } from \"lib/providers/chatProvider\"; \nimport ChatList from 'components/chat/ChatList';\nimport ChatForm from 'components/chat/ChatForm'; \nimport { useChatState } from 'lib/providers/chatProvider';\nimport { TChatMessage } from 'types/chat';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport dayjs from 'dayjs';\nimport useSWR from 'swr'; \nimport { BACKEND_URL } from 'config';\nimport axios from 'axios';\n \nconst DirectMessageWrapper = styled.div`\n  width:100%;\n  height:100%; \n  display:flex;\n  flex-flow: row wrap;\n`;\n\ninterface Props { \n\n}\n\nconst DirectMessage = ({ }: Props): JSX.Element => {\n  \n\n  const router = useRouter()\n  const { partner_id } = router.query; \n  const dispatch = useChatDispatch();\n  const chat = useChatState();\n  const [message, setMessage] = useState('');\n  const me = useAuthState();\n\n  const usersArr = [me.userInfo.user_id, partner_id];\n  usersArr.sort();\n  const room_key = `${usersArr[0]}:${usersArr[1]}`;\n\n  const fetcher = async (url:string) => {\n    const resp = await axios.get(url);\n    return resp.data;\n  }\n\n  const {data, mutate, error} = useSWR(`${BACKEND_URL}/chat/message/${room_key}`, fetcher) \n\n  const test = () => {\n    const currentCache = data;\n    mutate([\n      ...data,\n      {\"id\":16,\"room_key\":\"111857151517954391058:ttt24522\",\"message\":\"파하\",\"from_user\":\"test\",\"to_user\":\"test\",\"nickname\":\"\",\"profile\":\"\",\"insert_datetime\":\"2021-02-15T12:01:49.000Z\",\"message_type\":\"text\",\"source\":\"\"}\n    ], false);\n  }\n\n  useEffect(() => {\n    if (!partner_id) return;\n    \n    dispatch({ type: \"JOIN_ROOM\", payload: room_key })   \n    \n  }, []);\n\n  const handleSendMessage = (e:any):void => {\n    e.preventDefault();\n   \n    const { nickname, profile, user_id } = me.userInfo;\n    \n    const payload: TChatMessage = {\n        room_key,   \n        nickname, \n        profile, \n        insert_datetime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n        message,  \n        source: '',\n        message_type: 'text',\n        from_user:user_id,   \n        to_user:partner_id.toString() \n    }\n\n    dispatch({type:\"SEND_MESSAGE\", payload})   \n    \n    setMessage(''); \n  }\n\n  if (error) return <div>ERROR</div>;\n\n  return (\n    <TransitionLayout title=\"채팅\" requiredLogin={true}>  \n      <DirectMessageWrapper>\n        { JSON.stringify(data)}\n        partner_id : {partner_id}  \n        { JSON.stringify(me.userInfo.user_id)}\n        <ChatList datas={chat.chatList}/> \n        <ChatForm message={message} setMessage={setMessage} handleSendMessage={handleSendMessage} />\n        <button onClick={test}>MUTATE</button>\n     </DirectMessageWrapper>\n   </TransitionLayout> \n  )\n\n} \n\nexport default DirectMessage;"]},"metadata":{},"sourceType":"module"}