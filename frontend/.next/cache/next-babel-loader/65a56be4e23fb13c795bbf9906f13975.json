{"ast":null,"code":"import axios from \"axios\";\nvar customAxios = axios.create({\n  baseURL: 'http://localhost:8080/'\n});\ncustomAxios.interceptors.request.use(function (config) {\n  // 요청을 보내기 전에 수행할 일\n  // ...\n  alert(\"잘되누\");\n  return config;\n}, function (error) {\n  if (error.response) {\n    // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n    console.log(error.response.data);\n    console.log(error.response.status);\n    console.log(error.response.headers);\n  } else if (error.request) {\n    // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n    // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n    // Node.js의 http.ClientRequest 인스턴스입니다.\n    console.log(error.request);\n  } else {\n    // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n    console.log('Error', error.message);\n  }\n\n  console.log(error.config);\n  return Promise.reject(error);\n});\ncustomAxios.interceptors.response.use(function (response) {\n  // 응답 데이터를 가공\n  // ...\n  alert(\"잘되누\");\n  return response;\n}, function (error) {\n  // 오류 응답을 처리\n  alert(\"잘되누\"); // ...\n\n  return Promise.reject(error);\n});\nexport default customAxios;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/util/axios.ts"],"names":["axios","customAxios","create","baseURL","interceptors","request","use","config","alert","error","response","console","log","data","status","headers","message","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAE;AADsB,CAAb,CAApB;AAIAF,WAAW,CAACG,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CACE,UAAUC,MAAV,EAAkB;AAChB;AACA;AACAC,EAAAA,KAAK,CAAC,KAAD,CAAL;AACA,SAAOD,MAAP;AACD,CANH,EAOE,UAAUE,KAAV,EAAiB;AACf,MAAIA,KAAK,CAACC,QAAV,EAAoB;AAClB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,QAAN,CAAeG,IAA3B;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,QAAN,CAAeI,MAA3B;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACC,QAAN,CAAeK,OAA3B;AACD,GALD,MAMK,IAAIN,KAAK,CAACJ,OAAV,EAAmB;AACtB;AACA;AACA;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACJ,OAAlB;AACD,GALI,MAMA;AACH;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBH,KAAK,CAACO,OAA3B;AACD;;AACDL,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACF,MAAlB;AACA,SAAOU,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD,CA1BH;AA4BAR,WAAW,CAACG,YAAZ,CAAyBM,QAAzB,CAAkCJ,GAAlC,CACI,UAAUI,QAAV,EAAoB;AAClB;AACA;AACFF,EAAAA,KAAK,CAAC,KAAD,CAAL;AACE,SAAOE,QAAP;AACD,CANL,EAOI,UAAUD,KAAV,EAAiB;AACf;AACAD,EAAAA,KAAK,CAAC,KAAD,CAAL,CAFe,CAGf;;AACA,SAAOS,OAAO,CAACC,MAAR,CAAeT,KAAf,CAAP;AACD,CAZL;AAaA,eAAeR,WAAf","sourcesContent":["import axios from \"axios\";\n\nconst customAxios = axios.create({\n  baseURL: 'http://localhost:8080/',  \n});\n\ncustomAxios.interceptors.request.use(\n  function (config) {\n    // 요청을 보내기 전에 수행할 일\n    // ...\n    alert(\"잘되누\");\n    return config;\n  },\n  function (error) {\n    if (error.response) {\n      // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    }\n    else if (error.request) {\n      // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n      // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n      // Node.js의 http.ClientRequest 인스턴스입니다.\n      console.log(error.request);\n    }\n    else {\n      // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n    return Promise.reject(error);\n  });\n\ncustomAxios.interceptors.response.use(\n    function (response) {\n      // 응답 데이터를 가공\n      // ...\n    alert(\"잘되누\");\n      return response;\n    },\n    function (error) {\n      // 오류 응답을 처리\n      alert(\"잘되누\");\n      // ...\n      return Promise.reject(error);\n    });\nexport default customAxios;"]},"metadata":{},"sourceType":"module"}