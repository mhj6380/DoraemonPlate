{"ast":null,"code":"import _defineProperty from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useContext, createContext } from \"react\"; // import Cookies from \"js-cookie\";\n// import Axios from \"axios\";\n// 필요한 타입들을 미리 선언\n\n// Context 만들기\nvar ChatStateContext = /*#__PURE__*/createContext(null);\nvar ChatDispatchContext = /*#__PURE__*/createContext(null); // 리듀서\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_ROOM_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userInfo: action.userInfo // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n\n      });\n\n    case \"SET_CHAT_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        language: action.language\n      });\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n} // AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\n\n\nexport var ChatProvider = function ChatProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  var userInfo = {};\n  var language = \"ko\";\n  var notiCount = 0;\n\n  var _useReducer = useReducer(reducer, {\n    userInfo: userInfo,\n    language: language,\n    notiCount: notiCount\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return /*#__PURE__*/_jsxDEV(ChatStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(ChatDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, _this);\n}; // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n\n_s(ChatProvider, \"r11zh0u5dbQXx0Hz/+KMdfeon1g=\");\n\n_c = ChatProvider;\nexport function useAuthState() {\n  _s2();\n\n  var state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\n\n_s2(useAuthState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useAuthDispatch() {\n  _s3();\n\n  var dispatch = useContext(ChatDispatchContext);\n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}\n\n_s3(useAuthDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx"],"names":["React","useReducer","useContext","createContext","ChatStateContext","ChatDispatchContext","reducer","state","action","type","userInfo","language","Error","ChatProvider","children","notiCount","dispatch","useAuthState","useAuthDispatch"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,aAAxC,QAAuE,OAAvE,C,CACA;AACA;AACA;;AAoCA;AACA,IAAMC,gBAAgB,gBAAGD,aAAa,CAAa,IAAb,CAAtC;AACA,IAAME,mBAAmB,gBAAGF,aAAa,CAAsB,IAAtB,CAAzC,C,CAEA;;AACA,SAASG,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,QAAQ,EAAEF,MAAM,CAACE,QAFnB,CAE6B;;AAF7B;;AAMF,SAAK,eAAL;AACE,6CACKH,KADL;AAEEI,QAAAA,QAAQ,EAAEH,MAAM,CAACG;AAFnB;;AAKF;AACE,YAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AAfJ;AAiBD,C,CAED;AACA;;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAiD;AAAA;;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAC3E;AAEA,MAAIJ,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAII,SAAS,GAAG,CAAhB;;AAL2E,oBAOjDd,UAAU,CAACK,OAAD,EAAU;AAC5CI,IAAAA,QAAQ,EAARA,QAD4C;AAE5CC,IAAAA,QAAQ,EAARA,QAF4C;AAG5CI,IAAAA,SAAS,EAATA;AAH4C,GAAV,CAPuC;AAAA,MAOpER,KAPoE;AAAA,MAO7DS,QAP6D;;AAa3E,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAET,KAAlC;AAAA,2BACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAES,QAArC;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CApBM,C,CAsBP;;GAtBaD,Y;;KAAAA,Y;AAuBb,OAAO,SAASI,YAAT,GAAwB;AAAA;;AAC7B,MAAMV,KAAK,GAAGL,UAAU,CAACE,gBAAD,CAAxB;AACA,MAAI,CAACG,KAAL,EAAY,MAAM,IAAIK,KAAJ,CAAU,0BAAV,CAAN,CAFiB,CAE4B;;AACzD,SAAOL,KAAP;AACD;;IAJeU,Y;;AAMhB,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,MAAMF,QAAQ,GAAGd,UAAU,CAACG,mBAAD,CAA3B;AACA,MAAI,CAACW,QAAL,EAAe,MAAM,IAAIJ,KAAJ,CAAU,0BAAV,CAAN,CAFiB,CAE4B;;AAC5D,SAAOI,QAAP;AACD;;IAJeE,e","sourcesContent":["import React, { useReducer, useContext, createContext, Dispatch } from \"react\";\n// import Cookies from \"js-cookie\";\n// import Axios from \"axios\";\n// 필요한 타입들을 미리 선언\n\ninterface IRoom {\n  id: number;\n  roomKey: string;\n  roomName: string;\n  lastMsg: string;\n  lastDatetime: string;\n  seen: boolean;\n}\n\ninterface IChat {\n  id: number;\n  nickname: string;\n  profile: string;\n  datetime: string;\n  message: string;\n  msgType: string;\n  source: string;\n}\n \n// 상태를 위한 타입\ntype State = {\n  roomKey: string;\n  roomList: IRoom[];\n  chatList: IChat[]; \n};\n\n// 모든 액션들을 위한 타입\ntype Action =\n  | { type: \"SET_ROOM_LIST\"; userInfo: any }\n  | { type: \"SET_CHAT_LIST\"; language: string };\n \n// 디스패치를 위한 타입 (Dispatch 를 리액트에서 불러올 수 있음), 액션들의 타입을 Dispatch 의 Generics로 설정\ntype AuthDispatch = Dispatch<Action>;\n\n// Context 만들기\nconst ChatStateContext = createContext<any | null>(null);\nconst ChatDispatchContext = createContext<AuthDispatch | null>(null);\n\n// 리듀서\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"SET_ROOM_LIST\":\n      return {\n        ...state,\n        userInfo: action.userInfo, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n\n    \n    case \"SET_CHAT_LIST\": \n      return {\n        ...state,\n        language: action.language,\n      };\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\n// AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => { \n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n\n  var userInfo = {};\n  var language = \"ko\";\n  var notiCount = 0;\n\n  const [state, dispatch] = useReducer(reducer, {\n    userInfo,\n    language, \n    notiCount\n  });\n\n  return (\n    <ChatStateContext.Provider value={state}>\n      <ChatDispatchContext.Provider value={dispatch}> \n        {children}\n      </ChatDispatchContext.Provider>\n    </ChatStateContext.Provider>\n  );\n};\n\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\nexport function useAuthState() {\n  const state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return state;\n} \n\nexport function useAuthDispatch() {\n  const dispatch = useContext(ChatDispatchContext); \n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return dispatch;\n}\n"]},"metadata":{},"sourceType":"module"}