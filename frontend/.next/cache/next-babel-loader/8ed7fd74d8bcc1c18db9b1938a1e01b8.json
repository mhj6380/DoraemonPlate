{"ast":null,"code":"import { delay, put, takeLatest, all, fork, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, generateDummyPost } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  const id = shortid.generate();\n\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000); // const result = yield call(addPostAPI, action.data);\n\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000); // const result = yield call(addCommentAPI, action.data);\n\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n} // takeLatest : 여러번 클릭 실수를 무시하고 마지막 한번에 대해서만 실행\n// throttle : 시간 안에 요청수 제한. 2000으로 설정하면 2초동안 1번의 요청만 유효하게함.\n\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSage() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["/Users/munhagju/WebstormProjects/DoraemonPlate/frontend_v2/sagas/post.js"],"names":["delay","put","takeLatest","all","fork","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","generateDummyPost","ADD_POST_TO_ME","axios","shortid","addPostAPI","data","post","addPost","action","id","generate","type","content","err","loadPostsAPI","get","loadPosts","console","log","removePostAPI","delete","removePost","REMOVE_POST_OF_ME","addCommentAPI","postId","addComment","response","watchLoadPosts","watchAddPost","watchRemovePost","watchAddComment","postSage"],"mappings":"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","sourcesContent":["import {\n  delay,\n  put,\n  takeLatest,\n  all,\n  fork,\n  throttle,\n} from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  REMOVE_POST_REQUEST,\n  REMOVE_POST_SUCCESS,\n  REMOVE_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  LOAD_POSTS_REQUEST,\n  LOAD_POSTS_SUCCESS,\n  LOAD_POSTS_FAILURE,\n  generateDummyPost,\n} from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nimport axios from \"axios\";\nimport shortid from \"shortid\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/post\", data);\n}\n\nfunction* addPost(action) {\n  const id = shortid.generate();\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data,\n      },\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      id,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n    });\n  }\n}\n\nfunction loadPostsAPI(data) {\n  return axios.get(\"/api/posts\", data);\n}\n\nfunction* loadPosts(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10),\n    });\n  } catch (err) {\n    console.log(err);\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.delete(\"/api/post\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data,\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    yield delay(1000);\n    // const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data,\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data,\n    });\n  }\n}\n\n// takeLatest : 여러번 클릭 실수를 무시하고 마지막 한번에 대해서만 실행\n// throttle : 시간 안에 요청수 제한. 2000으로 설정하면 2초동안 1번의 요청만 유효하게함.\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSage() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchAddComment),\n    fork(watchRemovePost),\n    fork(watchLoadPosts),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}