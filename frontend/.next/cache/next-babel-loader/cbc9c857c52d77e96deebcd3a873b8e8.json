{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/pages/auth/login.tsx\";\nimport React, { useCallback } from \"react\";\nimport Link from \"next/link\";\nimport { TextField } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { BACKEND_URL } from '../../config';\nimport { useCookies } from \"react-cookie\";\nimport { Title, ViewWrapper, LoginFormWrapper, NoAccount, CheckboxWrapper, ForgotPassword, FieldWrapper, SubmitBtn } from './styled';\nimport { useRouter } from 'next/router';\n\nconst LoginForm = () => {\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [cookies, setCookie] = useCookies([\"accessToken\"]);\n  const Router = useRouter();\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n    if (!email) return alert(\"이메일을 입력해 주세요.\");\n    if (!password) return alert(\"패스워드를 입력해 주세요.\");\n    axios.post(`${BACKEND_URL}/auth/login`, {\n      user_id: email,\n      password\n    }).then(res => {\n      console.log(res.data);\n\n      if (res.status === 200) {\n        if (!res.data.access_token || !res.data.refreshToken) return alert(\"토큰 발급 에러입니다!\");\n        console.log(cookies);\n        setCookie(\"accessToken\", res.data.accessToken, {\n          path: \"/\",\n          maxAge: 100000\n        });\n        setCookie(\"refreshToken\", res.data.refreshToken, {\n          path: \"/\",\n          maxAge: 700000\n        });\n        window.location.href = \"/\";\n        return;\n      }\n    }).catch(function (error) {\n      if (error.response) {\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        // console.log(error.response.data);\n        // console.log(error.response.status);\n        // console.log(error.response.headers);\n        return alert(error.response.data.message);\n      } else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n        // Node.js의 http.ClientRequest 인스턴스입니다.\n        console.log(error.request);\n      } else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log('Error', error.message);\n      }\n\n      return alert(\"서버 에러\");\n    });\n  }, [email, password]); // 이미 로그인중이라면 메인으로 \n  // if (me) Router.push('/'); \n\n  if (cookies.accessToken) {\n    Router.push('/');\n  }\n\n  return /*#__PURE__*/_jsxDEV(ViewWrapper, {\n    children: /*#__PURE__*/_jsxDEV(LoginFormWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginTextField, {\n        label: \"username\",\n        type: \"text\",\n        val: email,\n        setVal: setEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoginTextField, {\n        label: \"password\",\n        type: \"password\",\n        val: password,\n        setVal: setPassword\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CheckboxWrapper, {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"longsession\",\n          children: [\"\\uB85C\\uADF8\\uC778 \\uC720\\uC9C0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"longsession\",\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n        onClick: handleSubmit,\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForgotPassword, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/auth/find/password\",\n          children: \"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC78A\\uC73C\\uC168\\uB098\\uC694?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NoAccount, {\n        children: [\"\\uACC4\\uC815\\uC774 \\uC5C6\\uC73C\\uC2E0\\uAC00\\uC694? \", /*#__PURE__*/_jsxDEV(Link, {\n          href: \"/auth/register\",\n          children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\nconst LoginTextField = props => {\n  const {\n    label,\n    type,\n    val,\n    setVal\n  } = props;\n  return /*#__PURE__*/_jsxDEV(FieldWrapper, {\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      label: label,\n      fullWidth: true,\n      value: val,\n      type: type,\n      onChange: e => {\n        setVal(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n\nexport default LoginForm;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/pages/auth/login.tsx"],"names":["React","useCallback","Link","TextField","axios","BACKEND_URL","useCookies","Title","ViewWrapper","LoginFormWrapper","NoAccount","CheckboxWrapper","ForgotPassword","FieldWrapper","SubmitBtn","useRouter","LoginForm","email","setEmail","useState","password","setPassword","cookies","setCookie","Router","handleSubmit","e","preventDefault","alert","post","user_id","then","res","console","log","data","status","access_token","refreshToken","accessToken","path","maxAge","window","location","href","catch","error","response","message","request","push","LoginTextField","props","label","type","val","setVal","target","value"],"mappings":"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","sourcesContent":["import React, { useCallback } from \"react\";\nimport Link from \"next/link\";\nimport { TextField } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { BACKEND_URL } from '../../config'; \nimport { useCookies } from \"react-cookie\";\nimport { Title, ViewWrapper, LoginFormWrapper, NoAccount, CheckboxWrapper, ForgotPassword, FieldWrapper, SubmitBtn } from './styled';\nimport { useRouter } from 'next/router';\n\nconst LoginForm = () => {\n  const [email, setEmail] = React.useState(\"\");\n  const [password, setPassword] = React.useState(\"\");\n  const [cookies, setCookie] = useCookies([\"accessToken\"]);\n  \n  const Router = useRouter();\n\n  const handleSubmit = useCallback((e: any) => {\n    e.preventDefault();\n\n    if (!email) return alert(\"이메일을 입력해 주세요.\");\n    if (!password) return alert(\"패스워드를 입력해 주세요.\");\n\n \n    axios.post(`${BACKEND_URL}/auth/login`, {\n      user_id: email,\n      password\n    }).then((res: any) => {\n      console.log(res.data);\n\n      if (res.status === 200) {\n        if (!res.data.access_token || !res.data.refreshToken) return alert(\"토큰 발급 에러입니다!\");\n        console.log(cookies); \n        setCookie(\"accessToken\", res.data.accessToken, {\n          path: \"/\",\n          maxAge: 100000,\n        });\n        setCookie(\"refreshToken\", res.data.refreshToken, { \n          path: \"/\",\n          maxAge: 700000,\n        }); \n        window.location.href = \"/\"; \n        return;\n      }\n    }).catch(function (error) { \n      if (error.response) {\n        // 요청이 이루어졌으며 서버가 2xx의 범위를 벗어나는 상태 코드로 응답했습니다.\n        // console.log(error.response.data);\n        // console.log(error.response.status);\n        // console.log(error.response.headers);\n        return alert(error.response.data.message);\n      }\n      else if (error.request) {\n        // 요청이 이루어 졌으나 응답을 받지 못했습니다.\n        // `error.request`는 브라우저의 XMLHttpRequest 인스턴스 또는\n        // Node.js의 http.ClientRequest 인스턴스입니다.\n        console.log(error.request); \n      }\n      else {\n        // 오류를 발생시킨 요청을 설정하는 중에 문제가 발생했습니다.\n        console.log('Error', error.message);\n      }\n      return alert(\"서버 에러\");\n    });\n  },[email,password])\n\n\n  // 이미 로그인중이라면 메인으로 \n  // if (me) Router.push('/'); \n  if (cookies.accessToken) {\n    Router.push('/'); \n  }\n\n  return (\n    <ViewWrapper> \n      <LoginFormWrapper>\n        <Title>Login</Title>\n        <LoginTextField\n          label=\"username\"\n          type=\"text\"\n          val={email}\n          setVal={setEmail}\n        />\n        <LoginTextField\n          label=\"password\"\n          type=\"password\"\n          val={password}\n          setVal={setPassword}\n        />\n        <CheckboxWrapper>\n          <label htmlFor=\"longsession\">\n            로그인 유지\n             \n            <input id=\"longsession\" type=\"checkbox\" />\n          </label>\n        </CheckboxWrapper>\n        <SubmitBtn onClick={handleSubmit}>로그인</SubmitBtn>\n        <ForgotPassword>\n          <Link href=\"/auth/find/password\">비밀번호를 잊으셨나요?</Link>\n        </ForgotPassword>\n        <NoAccount>\n          계정이 없으신가요? <Link href=\"/auth/register\">회원가입</Link>\n        </NoAccount>\n      </LoginFormWrapper>\n    </ViewWrapper>\n  );\n};\n\n\n\n\n\nconst LoginTextField = (props) => {\n  const { label, type, val, setVal } = props;\n  return (\n    <FieldWrapper>\n      <TextField\n        label={label}\n        fullWidth\n        value={val}\n        type={type}\n        onChange={(e) => {\n          setVal(e.target.value);\n        }}\n      />\n    </FieldWrapper>\n  );\n};\n\nexport default LoginForm;\n"]},"metadata":{},"sourceType":"module"}