{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/components/contexts/socket/SocketProvider.tsx\";\nimport { useState, useEffect, useCallback, useContext } from \"react\";\nimport SocketIO from \"socket.io-client\";\nimport UserProfileContext from \"../profile/UserProfileContext\";\nimport SocketContext from \"./SocketContext\";\n\nconst SocketProvider = ({\n  children\n}) => {\n  const {\n    0: socket,\n    1: setSocket\n  } = useState(null);\n  const {\n    0: roomId,\n    1: setRoomId\n  } = useState(null);\n  const myProfile = useContext(UserProfileContext);\n  const {\n    0: roomMembers,\n    1: setRoomMembers\n  } = useState(null);\n  const {\n    0: textLogs,\n    1: setTextLogs\n  } = useState(null);\n  useEffect(() => {\n    if (true) {\n      return;\n    }\n\n    console.log(\"[mounted]\"); // connect to Socket.io server\n\n    const s = SocketIO();\n    setSocket(s); // initialize state\n\n    setRoomMembers({});\n    setTextLogs([]);\n    return () => {\n      console.log(\"[unmounted]\");\n\n      if (socket && socket.connected) {\n        socket.disconnect();\n      }\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket || !myProfile) return;\n    /**\r\n     * connection lost\r\n     */\n\n    function disconnect() {\n      console.log(\"[received] disconnect\");\n      setSocket(null);\n      socket.once(\"reconnect\", () => {\n        console.log(\"[reconnected]\");\n        setSocket(socket);\n        setRoomMembers({});\n        join(roomId);\n      });\n    }\n    /**\r\n     * somebody joined this session and said hello\r\n     * @param profile\r\n     * @param socketId\r\n     */\n\n\n    function hello(profile, socketId) {\n      console.log(\"[received] hello\", profile, \"from\", socketId);\n      const cs = Object.assign({}, roomMembers);\n      cs[socketId] = {\n        profile\n      };\n      setRoomMembers(cs);\n      socket.emit(\"hello-ack\", roomId, myProfile);\n    }\n    /**\r\n     * somebody responded to my greeting\r\n     * @param profile somebody\r\n     * @param socketId somebody's socket id\r\n     */\n\n\n    function helloAck(profile, socketId) {\n      console.log(\"[received] hello-ack\", profile, \"from\", socketId);\n      const cs = Object.assign({}, roomMembers);\n      cs[socketId] = {\n        profile\n      };\n      setRoomMembers(cs);\n    }\n    /**\r\n     * somebody is leaving this session\r\n     * @param socketId somebody's socket id\r\n     */\n\n\n    function bye(socketId) {\n      console.log(\"[received] bye from\", socketId, \"exists?\", !!roomMembers[socketId]);\n\n      if (roomMembers[socketId]) {\n        const cs = Object.assign({}, roomMembers);\n        delete cs[socketId];\n        setRoomMembers(cs);\n      }\n    }\n\n    socket.on(\"disconnect\", disconnect);\n    socket.on(\"hello\", hello);\n    socket.on(\"hello-ack\", helloAck);\n    socket.on(\"bye\", bye);\n    return () => {\n      socket.off(\"hello\", hello);\n      socket.off(\"hello-ack\", helloAck);\n      socket.off(\"bye\", bye);\n    };\n  }, [socket, myProfile, roomId, roomMembers]);\n  useEffect(() => {\n    if (!socket) return;\n    /**\r\n     * somebody sent a message\r\n     */\n\n    function text(data) {\n      const logs = textLogs.slice();\n      logs.push(data);\n      setTextLogs(logs);\n    }\n    /**\r\n     * somebody requested logs\r\n     */\n\n\n    function logs(userName) {\n      socket.emit(\"logs\", userName, textLogs);\n    }\n    /**\r\n     * somebody sent logs\r\n     */\n\n\n    function logsAck(source) {\n      const merged = [];\n      const target = textLogs.slice();\n\n      while (source.length > 0 || target.length > 0) {\n        // insert the rest\n        if (source.length <= 0) {\n          merged.push(target.shift());\n          continue;\n        } else if (target.length <= 0) {\n          merged.push(source.shift());\n          continue;\n        } // insert earlier log\n\n\n        let s = source[0],\n            t = target[0];\n\n        if (s.time > t.time) {\n          merged.push(target.shift());\n          continue;\n        } else if (s.time < t.time) {\n          merged.push(source.shift());\n          continue;\n        } // insert either one (same time = duplicate)\n\n\n        merged.push(source.shift());\n        target.shift();\n      }\n\n      setTextLogs(merged);\n    }\n\n    socket.on(\"text\", text);\n    socket.on(\"logs\", logs);\n    socket.on(\"logs-ack\", logsAck);\n    return () => {\n      socket.off(\"text\", text);\n      socket.off(\"logs\", logs);\n      socket.off(\"logs-ack\", logsAck);\n    };\n  }, [socket, roomId, textLogs]);\n  const join = useCallback(roomId => {\n    if (!roomId || !myProfile) {\n      return;\n    }\n\n    setRoomId(roomId);\n    setTextLogs([]);\n    socket.emit(\"hello\", roomId, myProfile);\n    console.log(\"[sent] hello in\", roomId);\n  }, [myProfile, socket]);\n  const leave = useCallback(() => {\n    if (socket && roomId) {\n      socket.emit(\"bye\", roomId);\n      console.log(\"[sent] bye in\", roomId);\n    }\n\n    setRoomMembers({});\n    setRoomId(null);\n    setTextLogs([]);\n  }, [socket, roomId]);\n  const text = useCallback(message => {\n    if (!socket || !roomId) {\n      return;\n    }\n\n    socket.emit(\"text\", roomId, message);\n  }, [socket, roomId]);\n  const data = Object.freeze({\n    roomId,\n    socket,\n    roomMembers,\n    textLogs,\n    join,\n    leave,\n    text\n  });\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n\nexport default SocketProvider;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/components/contexts/socket/SocketProvider.tsx"],"names":["useState","useEffect","useCallback","useContext","SocketIO","UserProfileContext","SocketContext","SocketProvider","children","socket","setSocket","roomId","setRoomId","myProfile","roomMembers","setRoomMembers","textLogs","setTextLogs","console","log","s","connected","disconnect","once","join","hello","profile","socketId","cs","Object","assign","emit","helloAck","bye","on","off","text","data","logs","slice","push","userName","logsAck","source","merged","target","length","shift","t","time","leave","message","freeze"],"mappings":"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","sourcesContent":["import { FC, useState, useEffect, useCallback, useContext } from \"react\";\r\nimport SocketIO, { Socket } from \"socket.io-client\";\r\n\r\nimport UserProfileContext from \"../profile/UserProfileContext\";\r\nimport { UserProfileIface } from \"../../../shared/UserProfileIface\";\r\nimport { TextIface } from \"../../../shared/TextIface\";\r\n\r\nimport SocketContext from \"./SocketContext\";\r\nimport { SocketIface } from \"./SocketIface\";\r\nimport { RoomMembersIface } from \"./RoomMembersIface\";\r\n\r\nconst SocketProvider: FC = ({ children }) => {\r\n  const [socket, setSocket] = useState<typeof Socket>(null);\r\n  const [roomId, setRoomId] = useState<string>(null);\r\n  const myProfile = useContext(UserProfileContext);\r\n  const [roomMembers, setRoomMembers] = useState<RoomMembersIface>(null);\r\n  const [textLogs, setTextLogs] = useState<TextIface[]>(null);\r\n\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return;\r\n    }\r\n    console.log(\"[mounted]\");\r\n\r\n    // connect to Socket.io server\r\n    const s = SocketIO();\r\n    setSocket(s);\r\n\r\n    // initialize state\r\n    setRoomMembers({});\r\n    setTextLogs([]);\r\n\r\n    return () => {\r\n      console.log(\"[unmounted]\");\r\n      if (socket && socket.connected) {\r\n        socket.disconnect();\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!socket || !myProfile) return;\r\n\r\n    /**\r\n     * connection lost\r\n     */\r\n    function disconnect() {\r\n      console.log(\"[received] disconnect\");\r\n      setSocket(null);\r\n\r\n      socket.once(\"reconnect\", () => {\r\n        console.log(\"[reconnected]\");\r\n        setSocket(socket);\r\n        setRoomMembers({});\r\n        join(roomId);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * somebody joined this session and said hello\r\n     * @param profile\r\n     * @param socketId\r\n     */\r\n    function hello(profile: UserProfileIface, socketId: string) {\r\n      console.log(\"[received] hello\", profile, \"from\", socketId);\r\n      const cs = Object.assign({}, roomMembers);\r\n      cs[socketId] = {\r\n        profile,\r\n      };\r\n      setRoomMembers(cs);\r\n      socket.emit(\"hello-ack\", roomId, myProfile);\r\n    }\r\n\r\n    /**\r\n     * somebody responded to my greeting\r\n     * @param profile somebody\r\n     * @param socketId somebody's socket id\r\n     */\r\n    function helloAck(profile: UserProfileIface, socketId: string) {\r\n      console.log(\"[received] hello-ack\", profile, \"from\", socketId);\r\n      const cs = Object.assign({}, roomMembers);\r\n      cs[socketId] = {\r\n        profile,\r\n      };\r\n      setRoomMembers(cs);\r\n    }\r\n\r\n    /**\r\n     * somebody is leaving this session\r\n     * @param socketId somebody's socket id\r\n     */\r\n    function bye(socketId: string) {\r\n      console.log(\r\n        \"[received] bye from\",\r\n        socketId,\r\n        \"exists?\",\r\n        !!roomMembers[socketId]\r\n      );\r\n      if (roomMembers[socketId]) {\r\n        const cs = Object.assign({}, roomMembers);\r\n        delete cs[socketId];\r\n        setRoomMembers(cs);\r\n      }\r\n    }\r\n\r\n    socket.on(\"disconnect\", disconnect);\r\n    socket.on(\"hello\", hello);\r\n    socket.on(\"hello-ack\", helloAck);\r\n    socket.on(\"bye\", bye);\r\n\r\n    return () => {\r\n      socket.off(\"hello\", hello);\r\n      socket.off(\"hello-ack\", helloAck);\r\n      socket.off(\"bye\", bye);\r\n    };\r\n  }, [socket, myProfile, roomId, roomMembers]);\r\n\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n\r\n    /**\r\n     * somebody sent a message\r\n     */\r\n    function text(data: TextIface) {\r\n      const logs = textLogs.slice();\r\n      logs.push(data);\r\n      setTextLogs(logs);\r\n    }\r\n\r\n    /**\r\n     * somebody requested logs\r\n     */\r\n    function logs(userName: string) {\r\n      socket.emit(\"logs\", userName, textLogs);\r\n    }\r\n\r\n    /**\r\n     * somebody sent logs\r\n     */\r\n    function logsAck(source: TextIface[]) {\r\n      const merged: TextIface[] = [];\r\n      const target = textLogs.slice();\r\n      while (source.length > 0 || target.length > 0) {\r\n        // insert the rest\r\n        if (source.length <= 0) {\r\n          merged.push(target.shift());\r\n          continue;\r\n        } else if (target.length <= 0) {\r\n          merged.push(source.shift());\r\n          continue;\r\n        }\r\n\r\n        // insert earlier log\r\n        let s = source[0],\r\n          t = target[0];\r\n        if (s.time > t.time) {\r\n          merged.push(target.shift());\r\n          continue;\r\n        } else if (s.time < t.time) {\r\n          merged.push(source.shift());\r\n          continue;\r\n        }\r\n\r\n        // insert either one (same time = duplicate)\r\n        merged.push(source.shift());\r\n        target.shift();\r\n      }\r\n      setTextLogs(merged);\r\n    }\r\n\r\n    socket.on(\"text\", text);\r\n    socket.on(\"logs\", logs);\r\n    socket.on(\"logs-ack\", logsAck);\r\n\r\n    return () => {\r\n      socket.off(\"text\", text);\r\n      socket.off(\"logs\", logs);\r\n      socket.off(\"logs-ack\", logsAck);\r\n    };\r\n  }, [socket, roomId, textLogs]);\r\n\r\n  const join = useCallback(\r\n    (roomId: string) => {\r\n      if (!roomId || !myProfile) {\r\n        return;\r\n      }\r\n      setRoomId(roomId);\r\n      setTextLogs([]);\r\n      socket.emit(\"hello\", roomId, myProfile);\r\n      console.log(\"[sent] hello in\", roomId);\r\n    },\r\n    [myProfile, socket]\r\n  );\r\n\r\n  const leave = useCallback(() => {\r\n    if (socket && roomId) {\r\n      socket.emit(\"bye\", roomId);\r\n      console.log(\"[sent] bye in\", roomId);\r\n    }\r\n    setRoomMembers({});\r\n    setRoomId(null);\r\n    setTextLogs([]);\r\n  }, [socket, roomId]);\r\n\r\n  const text = useCallback(\r\n    (message: string) => {\r\n      if (!socket || !roomId) {\r\n        return;\r\n      }\r\n      socket.emit(\"text\", roomId, message);\r\n    },\r\n    [socket, roomId]\r\n  );\r\n\r\n  const data: SocketIface = Object.freeze({\r\n    roomId,\r\n    socket,\r\n    roomMembers,\r\n    textLogs,\r\n    join,\r\n    leave,\r\n    text,\r\n  });\r\n\r\n  return (\r\n    <SocketContext.Provider value={data}>{children}</SocketContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SocketProvider;\r\n"]},"metadata":{},"sourceType":"module"}