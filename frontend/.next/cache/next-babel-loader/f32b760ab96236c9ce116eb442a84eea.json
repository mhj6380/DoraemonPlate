{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useReducer, useContext, createContext } from \"react\"; // import Cookies from \"js-cookie\";\n// import Axios from \"axios\";\n// 필요한 타입들을 미리 선언\n// 상태를 위한 타입\n\n// Context 만들기\nconst AuthStateContext = /*#__PURE__*/createContext(null);\nconst AuthDispatchContext = /*#__PURE__*/createContext(null); // 리듀서\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        userInfo: action.userInfo // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n\n      });\n\n    case \"UPDATE_LANGUAGE\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        language: action.language\n      });\n\n    case \"UPDATE_NOTICOUNT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        notiCount: action.notiCount\n      });\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n} // AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\n\n\nexport const ChatProvider = ({\n  children\n}) => {\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  var userInfo = {};\n  var language = \"ko\";\n  var notiCount = 0;\n  const {\n    0: state,\n    1: dispatch\n  } = useReducer(reducer, {\n    userInfo,\n    language,\n    notiCount\n  });\n  return /*#__PURE__*/_jsxDEV(AuthStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(AuthDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}; // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n\nexport function useAuthState() {\n  const state = useContext(AuthStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\nexport function useAuthDispatch() {\n  const dispatch = useContext(AuthDispatchContext);\n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx"],"names":["React","useReducer","useContext","createContext","AuthStateContext","AuthDispatchContext","reducer","state","action","type","userInfo","language","notiCount","Error","ChatProvider","children","dispatch","useAuthState","useAuthDispatch"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,aAAxC,QAAuE,OAAvE,C,CACA;AACA;AACA;AAEA;;AAgBA;AACA,MAAMC,gBAAgB,gBAAGD,aAAa,CAAa,IAAb,CAAtC;AACA,MAAME,mBAAmB,gBAAGF,aAAa,CAAsB,IAAtB,CAAzC,C,CAEA;;AACA,SAASG,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,QAAQ,EAAEF,MAAM,CAACE,QAFnB,CAE6B;;AAF7B;;AAMF,SAAK,iBAAL;AACE,6CACKH,KADL;AAEEI,QAAAA,QAAQ,EAAEH,MAAM,CAACG;AAFnB;;AAKF,SAAK,kBAAL;AACE,6CACKJ,KADL;AAEEK,QAAAA,SAAS,EAAEJ,MAAM,CAACI;AAFpB;;AAIF;AACE,YAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AApBJ;AAsBD,C,CAED;AACA;;;AACA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiD;AAC3E;AAEA,MAAIL,QAAQ,GAAG,EAAf;AACA,MAAIC,QAAQ,GAAG,IAAf;AACA,MAAIC,SAAS,GAAG,CAAhB;AAEA,QAAM;AAAA,OAACL,KAAD;AAAA,OAAQS;AAAR,MAAoBf,UAAU,CAACK,OAAD,EAAU;AAC5CI,IAAAA,QAD4C;AAE5CC,IAAAA,QAF4C;AAG5CC,IAAAA;AAH4C,GAAV,CAApC;AAMA,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEL,KAAlC;AAAA,2BACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAES,QAArC;AAAA,gBACGD;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CApBM,C,CAsBP;;AACA,OAAO,SAASE,YAAT,GAAwB;AAC7B,QAAMV,KAAK,GAAGL,UAAU,CAACE,gBAAD,CAAxB;AACA,MAAI,CAACG,KAAL,EAAY,MAAM,IAAIM,KAAJ,CAAU,0BAAV,CAAN,CAFiB,CAE4B;;AACzD,SAAON,KAAP;AACD;AAED,OAAO,SAASW,eAAT,GAA2B;AAChC,QAAMF,QAAQ,GAAGd,UAAU,CAACG,mBAAD,CAA3B;AACA,MAAI,CAACW,QAAL,EAAe,MAAM,IAAIH,KAAJ,CAAU,0BAAV,CAAN,CAFiB,CAE4B;;AAC5D,SAAOG,QAAP;AACD","sourcesContent":["import React, { useReducer, useContext, createContext, Dispatch } from \"react\";\n// import Cookies from \"js-cookie\";\n// import Axios from \"axios\";\n// 필요한 타입들을 미리 선언\n \n// 상태를 위한 타입\ntype State = {\n  userInfo: any;\n  language: string;\n  notiCount: number; \n};\n\n// 모든 액션들을 위한 타입\ntype Action = \n  | { type: \"UPDATE_USER\"; userInfo: any }\n  | { type: \"UPDATE_LANGUAGE\"; language: string }\n  | { type: \"UPDATE_NOTICOUNT\"; notiCount: number };\n \n// 디스패치를 위한 타입 (Dispatch 를 리액트에서 불러올 수 있음), 액션들의 타입을 Dispatch 의 Generics로 설정\ntype AuthDispatch = Dispatch<Action>;\n\n// Context 만들기\nconst AuthStateContext = createContext<any | null>(null);\nconst AuthDispatchContext = createContext<AuthDispatch | null>(null);\n\n// 리듀서\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"UPDATE_USER\":\n      return {\n        ...state,\n        userInfo: action.userInfo, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n\n    \n    case \"UPDATE_LANGUAGE\":\n      return {\n        ...state,\n        language: action.language,\n      };\n\n    case \"UPDATE_NOTICOUNT\":\n      return {\n        ...state,\n        notiCount: action.notiCount,  \n      }; \n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\n// AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => { \n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n\n  var userInfo = {};\n  var language = \"ko\";\n  var notiCount = 0;\n\n  const [state, dispatch] = useReducer(reducer, {\n    userInfo,\n    language, \n    notiCount\n  });\n\n  return (\n    <AuthStateContext.Provider value={state}>\n      <AuthDispatchContext.Provider value={dispatch}>\n        {children}\n      </AuthDispatchContext.Provider>\n    </AuthStateContext.Provider>\n  );\n};\n\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\nexport function useAuthState() {\n  const state = useContext(AuthStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return state;\n}\n\nexport function useAuthDispatch() {\n  const dispatch = useContext(AuthDispatchContext);\n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return dispatch;\n}\n"]},"metadata":{},"sourceType":"module"}