{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/pages/dm/[partner_id].tsx\";\nimport React, { useEffect, useState } from 'react';\nimport TransitionLayout from 'components/layout/TransitionLayout';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useChatDispatch } from 'lib/providers/chatProvider';\nimport ChatList from 'components/chat/ChatList';\nimport ChatForm from 'components/chat/ChatForm'; // import { useChatState } from 'lib/providers/chatProvider';\n\nimport { useAuthState } from 'lib/providers/authProvider';\nimport dayjs from 'dayjs';\nimport useSWR from 'swr';\nimport { BACKEND_URL } from 'config';\nimport axios from 'axios';\nconst DirectMessageWrapper = styled.div.withConfig({\n  displayName: \"partner_id__DirectMessageWrapper\",\n  componentId: \"sc-4pw1eg-0\"\n})([\"width:100%;height:100%;display:flex;flex-flow:row wrap;background:#ededed;\"]);\n\nconst DirectMessage = ({}) => {\n  const router = useRouter();\n  const {\n    partner_id\n  } = router.query;\n  const dispatch = useChatDispatch();\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const me = useAuthState(); // const chat = useChatState();\n\n  const usersArr = [me.userInfo.user_id, partner_id];\n  usersArr.sort();\n  const room_key = `${usersArr[0]}:${usersArr[1]}`;\n\n  const fetcher = async url => {\n    const resp = await axios.get(url);\n    return resp.data;\n  };\n\n  const {\n    data,\n    mutate,\n    error\n  } = useSWR(`${BACKEND_URL}/chat/message/${room_key}`, fetcher);\n\n  const test = () => {\n    // 기존 캐시 업데이트\n    mutate([...data, {\n      id: 16,\n      room_key: '111857151517954391058:ttt24522',\n      message: '파하',\n      from_user: 'test',\n      to_user: 'test',\n      nickname: '',\n      profile: '',\n      insert_datetime: '2021-02-15T12:01:49.000Z',\n      message_type: 'text',\n      source: ''\n    }], false);\n  };\n\n  useEffect(() => {\n    if (!partner_id) return;\n    dispatch({\n      type: 'JOIN_ROOM',\n      payload: room_key\n    });\n  }, []);\n\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const {\n      nickname,\n      profile,\n      user_id\n    } = me.userInfo;\n    const payload = {\n      room_key,\n      nickname,\n      profile,\n      insert_datetime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n      message,\n      source: '',\n      message_type: 'text',\n      from_user: user_id,\n      to_user: partner_id.toString()\n    };\n    dispatch({\n      type: 'SEND_MESSAGE',\n      payload\n    });\n    setMessage('');\n  };\n\n  if (!data) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"ERROR\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(TransitionLayout, {\n    title: \"\\uCC44\\uD305\",\n    requiredLogin: true,\n    children: /*#__PURE__*/_jsxDEV(DirectMessageWrapper, {\n      children: [JSON.stringify(data), \"partner_id : \", partner_id, JSON.stringify(me.userInfo.user_id), /*#__PURE__*/_jsxDEV(ChatList, {\n        datas: data\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatForm, {\n        message: message,\n        setMessage: setMessage,\n        handleSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: test,\n        children: \"MUTATE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DirectMessage;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/pages/dm/[partner_id].tsx"],"names":["React","useEffect","useState","TransitionLayout","useRouter","styled","useChatDispatch","ChatList","ChatForm","useAuthState","dayjs","useSWR","BACKEND_URL","axios","DirectMessageWrapper","div","DirectMessage","router","partner_id","query","dispatch","message","setMessage","me","usersArr","userInfo","user_id","sort","room_key","fetcher","url","resp","get","data","mutate","error","test","id","from_user","to_user","nickname","profile","insert_datetime","message_type","source","type","payload","handleSendMessage","e","preventDefault","format","toString","JSON","stringify"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TransitionLayout from 'components/layout/TransitionLayout';\nimport { useRouter } from 'next/router';\nimport styled from 'styled-components';\nimport { useChatDispatch } from 'lib/providers/chatProvider';\nimport ChatList from 'components/chat/ChatList';\nimport ChatForm from 'components/chat/ChatForm';\n// import { useChatState } from 'lib/providers/chatProvider';\nimport { TChatMessage } from 'types/chat';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport dayjs from 'dayjs';\nimport useSWR from 'swr';\nimport { BACKEND_URL } from 'config';\nimport axios from 'axios';\n\nconst DirectMessageWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-flow: row wrap;\n  background: #ededed;\n`;\n\ninterface Props {}\n\nconst DirectMessage = ({}: Props): JSX.Element => {\n  const router = useRouter();\n  const { partner_id } = router.query;\n  const dispatch = useChatDispatch();\n  const [message, setMessage] = useState('');\n  const me = useAuthState();\n  // const chat = useChatState();\n\n  const usersArr = [me.userInfo.user_id, partner_id];\n  usersArr.sort();\n  const room_key = `${usersArr[0]}:${usersArr[1]}`;\n\n  const fetcher = async (url: string) => {\n    const resp = await axios.get(url);\n    return resp.data;\n  };\n\n  const { data, mutate, error } = useSWR(\n    `${BACKEND_URL}/chat/message/${room_key}`,\n    fetcher\n  );\n\n  const test = () => {\n    // 기존 캐시 업데이트\n    mutate(\n      [\n        ...data,\n        {\n          id: 16,\n          room_key: '111857151517954391058:ttt24522',\n          message: '파하',\n          from_user: 'test',\n          to_user: 'test',\n          nickname: '',\n          profile: '',\n          insert_datetime: '2021-02-15T12:01:49.000Z',\n          message_type: 'text',\n          source: '',\n        },\n      ],\n      false\n    );\n  };\n\n  useEffect(() => {\n    if (!partner_id) return;\n\n    dispatch({ type: 'JOIN_ROOM', payload: room_key });\n  }, []);\n\n  const handleSendMessage = (e: any): void => {\n    e.preventDefault();\n\n    const { nickname, profile, user_id } = me.userInfo;\n\n    const payload: TChatMessage = {\n      room_key,\n      nickname,\n      profile,\n      insert_datetime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n      message,\n      source: '',\n      message_type: 'text',\n      from_user: user_id,\n      to_user: partner_id.toString(),\n    };\n\n    dispatch({ type: 'SEND_MESSAGE', payload });\n\n    setMessage('');\n  };\n\n  if (!data) return <div>ERROR</div>;\n\n  return (\n    <TransitionLayout title=\"채팅\" requiredLogin={true}>\n      <DirectMessageWrapper>\n        {JSON.stringify(data)}\n        partner_id : {partner_id}\n        {JSON.stringify(me.userInfo.user_id)}\n        <ChatList datas={data} />\n        <ChatForm\n          message={message}\n          setMessage={setMessage}\n          handleSendMessage={handleSendMessage}\n        />\n        <button onClick={test}>MUTATE</button>\n      </DirectMessageWrapper>\n    </TransitionLayout>\n  );\n};\n\nexport default DirectMessage;\n"]},"metadata":{},"sourceType":"module"}