{"ast":null,"code":"import _regeneratorRuntime from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx\",\n    _s = $RefreshSig$(),\n    _this = this,\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useContext, createContext, useEffect } from 'react';\nimport { SocketContext } from './socketContext';\nimport axios from 'util/axios';\nimport { BACKEND_URL } from 'config';\nimport useSWR from 'swr'; // 필요한 타입들을 미리 선언\n// 상태를 위한 타입\n\n// Context 만들기\nvar ChatStateContext = /*#__PURE__*/createContext(null);\nvar ChatDispatchContext = /*#__PURE__*/createContext(null); // async function setRoomMessages(room_key:string) {\n//   const messages = await axios.get(`${BACKEND_URL}/chat/message/${room_key}`);\n//   console.log(\"setRoomMessages!\");\n//   console.log(messages.data);\n//   dispatch({ type: 'SET_CHAT_LIST', messages.data })\n// }\n// 리듀서\n\nfunction reducer(state, action) {\n  _s();\n\n  var socket = useContext(SocketContext);\n\n  switch (action.type) {\n    // 채팅방 입장 시 발동.\n    case 'JOIN_ROOM':\n      socket.emit('joinRoom', {\n        room_key: action.payload\n      }); // setRoomMessages(action.payload);\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inRoomKey: action.payload\n      });\n\n    case 'SEND_MESSAGE':\n      var newSendChats = [].concat(_toConsumableArray(state.chatList), [action.payload]);\n      socket.emit('msgToServer', action.payload);\n      var _action$payload = action.payload,\n          room_key = _action$payload.room_key,\n          insert_datetime = _action$payload.insert_datetime,\n          message = _action$payload.message,\n          from_user = _action$payload.from_user,\n          to_user = _action$payload.to_user,\n          nickname = _action$payload.nickname,\n          profile = _action$payload.profile,\n          message_type = _action$payload.message_type,\n          source = _action$payload.source;\n      axios.post(\"\".concat(BACKEND_URL, \"/chat/message\"), {\n        room_key: room_key,\n        message: message,\n        from_user: from_user,\n        to_user: to_user,\n        nickname: nickname,\n        profile: profile,\n        insert_datetime: insert_datetime,\n        message_type: message_type,\n        source: source\n      });\n\n      var fetcher = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n          var resp;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return axios.get(url);\n\n                case 2:\n                  resp = _context.sent;\n                  return _context.abrupt(\"return\", resp.data);\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function fetcher(_x) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      var _useSWR = useSWR(\"\".concat(BACKEND_URL, \"/chat/message/\").concat(room_key), fetcher),\n          data = _useSWR.data,\n          mutate = _useSWR.mutate;\n\n      mutate([].concat(_toConsumableArray(data), [{\n        id: 16,\n        room_key: '111857151517954391058:ttt24522',\n        message: '파하',\n        from_user: 'test',\n        to_user: 'test',\n        nickname: '',\n        profile: '',\n        insert_datetime: '2021-02-15T12:01:49.000Z',\n        message_type: 'text',\n        source: ''\n      }]), false);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: newSendChats\n      });\n\n    case 'SET_ROOM_LIST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        roomList: action.payload // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n\n      });\n\n    case 'SET_CHAT_LIST':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: action.payload\n      });\n    // 메세지를 수신받을 때 발동한다.\n\n    case 'PUSH_CHAT_LIST':\n      var newChats = [].concat(_toConsumableArray(state.chatList), [action.payload]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: newChats\n      });\n\n    default:\n      throw new Error('Unhandled action');\n  }\n} // AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\n\n\n_s(reducer, \"YToqCwDWVTZDfmKq4GvOjAlHTI4=\", false, function () {\n  return [useSWR];\n});\n\nexport var ChatProvider = function ChatProvider(_ref2) {\n  _s2();\n\n  var children = _ref2.children;\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  var socket = useContext(SocketContext);\n  useEffect(function () {\n    if (!socket) return;\n    socket.on('msgToClient', function (payload) {\n      // 채팅 메세지 수신\n      dispatch({\n        type: 'PUSH_CHAT_LIST',\n        payload: payload\n      });\n    });\n\n    function disconnect() {\n      console.log('[received] disconnect');\n      socket.once('reconnect', function () {\n        console.log('[reconnected]');\n      });\n    } // 소켓 연결이 끉길경우 다시 연결 (아직 검증되지 않음)\n\n\n    socket.on('disconnect', function () {\n      disconnect();\n      return;\n    });\n  }, []);\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = [];\n\n  var _useReducer = useReducer(reducer, {\n    inRoomKey: inRoomKey,\n    roomList: roomList,\n    chatList: chatList\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return /*#__PURE__*/_jsxDEV(ChatStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(ChatDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, _this);\n}; // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n\n_s2(ChatProvider, \"oF8rGCyMrKJ/Ot55BUHbdfzS0k4=\");\n\n_c = ChatProvider;\nexport function useChatState() {\n  _s3();\n\n  var state = useContext(ChatStateContext);\n  if (!state) throw new Error('Cannot find AuthProvider'); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\n\n_s3(useChatState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useChatDispatch() {\n  _s4();\n\n  var dispatch = useContext(ChatDispatchContext);\n  if (!dispatch) throw new Error('Cannot find AuthProvider'); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}\n\n_s4(useChatDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx"],"names":["React","useReducer","useContext","createContext","useEffect","SocketContext","axios","BACKEND_URL","useSWR","ChatStateContext","ChatDispatchContext","reducer","state","action","socket","type","emit","room_key","payload","inRoomKey","newSendChats","chatList","insert_datetime","message","from_user","to_user","nickname","profile","message_type","source","post","fetcher","url","get","resp","data","mutate","id","roomList","newChats","Error","ChatProvider","children","on","dispatch","disconnect","console","log","once","useChatState","useChatDispatch"],"mappings":"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","sourcesContent":["import React, {\n  useReducer,\n  useContext,\n  createContext,\n  Dispatch,\n  useEffect,\n} from 'react';\nimport { TRoom, TChatMessage } from '../../types/chat';\nimport { SocketContext } from './socketContext';\nimport axios from 'util/axios';\nimport { BACKEND_URL } from 'config';\nimport useSWR from 'swr';\n// 필요한 타입들을 미리 선언\n\n// 상태를 위한 타입\ntype State = {\n  inRoomKey: string;\n  roomList: TRoom[];\n  chatList: TChatMessage[];\n};\n\n// 모든 액션들을 위한 타입\ntype Action =\n  | { type: 'JOIN_ROOM'; payload: string }\n  | { type: 'SEND_MESSAGE'; payload: TChatMessage }\n  | { type: 'SET_ROOM_LIST'; payload: TRoom[] }\n  | { type: 'SET_CHAT_LIST'; payload: TChatMessage[]; inRoomKey: string }\n  | { type: 'PUSH_CHAT_LIST'; payload: TChatMessage };\n\n// 디스패치를 위한 타입 (Dispatch 를 리액트에서 불러올 수 있음), 액션들의 타입을 Dispatch 의 Generics로 설정\ntype AuthDispatch = Dispatch<Action>;\n\n// Context 만들기\nconst ChatStateContext = createContext<any | null>(null);\nconst ChatDispatchContext = createContext<AuthDispatch | null>(null);\n\n// async function setRoomMessages(room_key:string) {\n//   const messages = await axios.get(`${BACKEND_URL}/chat/message/${room_key}`);\n//   console.log(\"setRoomMessages!\");\n//   console.log(messages.data);\n//   dispatch({ type: 'SET_CHAT_LIST', messages.data })\n// }\n\n// 리듀서\nfunction reducer(state: State, action: Action): State {\n  const socket = useContext(SocketContext);\n\n  switch (action.type) {\n    // 채팅방 입장 시 발동.\n    case 'JOIN_ROOM':\n      socket.emit('joinRoom', { room_key: action.payload });\n      // setRoomMessages(action.payload);\n      return {\n        ...state,\n        inRoomKey: action.payload,\n      };\n\n    case 'SEND_MESSAGE':\n      const newSendChats = [...state.chatList, action.payload];\n      socket.emit('msgToServer', action.payload);\n\n      const {\n        room_key,\n        insert_datetime,\n        message,\n        from_user,\n        to_user,\n        nickname,\n        profile,\n        message_type,\n        source,\n      } = action.payload;\n\n      axios.post(`${BACKEND_URL}/chat/message`, {\n        room_key,\n        message,\n        from_user,\n        to_user,\n        nickname,\n        profile,\n        insert_datetime,\n        message_type,\n        source,\n      });\n\n      const fetcher = async (url: string) => {\n        const resp = await axios.get(url);\n        return resp.data;\n      };\n\n      const { data, mutate } = useSWR(\n        `${BACKEND_URL}/chat/message/${room_key}`,\n        fetcher\n      );\n\n      mutate(\n        [\n          ...data,\n          {\n            id: 16,\n            room_key: '111857151517954391058:ttt24522',\n            message: '파하',\n            from_user: 'test',\n            to_user: 'test',\n            nickname: '',\n            profile: '',\n            insert_datetime: '2021-02-15T12:01:49.000Z',\n            message_type: 'text',\n            source: '',\n          },\n        ],\n        false\n      );\n\n      return {\n        ...state,\n        chatList: newSendChats,\n      };\n\n    case 'SET_ROOM_LIST':\n      return {\n        ...state,\n        roomList: action.payload, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n\n    case 'SET_CHAT_LIST':\n      return {\n        ...state,\n        chatList: action.payload,\n      };\n\n    // 메세지를 수신받을 때 발동한다.\n    case 'PUSH_CHAT_LIST':\n      const newChats = [...state.chatList, action.payload];\n\n      return {\n        ...state,\n        chatList: newChats,\n      };\n\n    default:\n      throw new Error('Unhandled action');\n  }\n}\n\n// AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => {\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on('msgToClient', (payload: TChatMessage) => {\n      // 채팅 메세지 수신\n      dispatch({ type: 'PUSH_CHAT_LIST', payload });\n    });\n\n    function disconnect() {\n      console.log('[received] disconnect');\n      socket.once('reconnect', () => {\n        console.log('[reconnected]');\n      });\n    }\n\n    // 소켓 연결이 끉길경우 다시 연결 (아직 검증되지 않음)\n    socket.on('disconnect', () => {\n      disconnect();\n      return;\n    });\n  }, []);\n\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = [];\n\n  const [state, dispatch] = useReducer(reducer, {\n    inRoomKey,\n    roomList,\n    chatList,\n  });\n\n  return (\n    <ChatStateContext.Provider value={state}>\n      <ChatDispatchContext.Provider value={dispatch}>\n        {children}\n      </ChatDispatchContext.Provider>\n    </ChatStateContext.Provider>\n  );\n};\n\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\nexport function useChatState() {\n  const state = useContext(ChatStateContext);\n  if (!state) throw new Error('Cannot find AuthProvider'); // 유효하지 않을땐 에러를 발생\n  return state;\n}\n\nexport function useChatDispatch() {\n  const dispatch = useContext(ChatDispatchContext);\n  if (!dispatch) throw new Error('Cannot find AuthProvider'); // 유효하지 않을땐 에러를 발생\n  return dispatch;\n}\n"]},"metadata":{},"sourceType":"module"}