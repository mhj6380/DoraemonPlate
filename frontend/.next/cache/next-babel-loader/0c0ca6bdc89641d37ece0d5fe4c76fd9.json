{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/components/form/EditorField.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport dynamic from 'next/dynamic';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { EditorState, convertFromHTML, ContentState } from 'draft-js';\nimport axios from 'axios';\nconst Editor = dynamic(() => import('react-draft-wysiwyg').then(mod => mod.Editor), {\n  ssr: false,\n  loadableGenerated: {\n    webpack: () => [require.resolveWeak('react-draft-wysiwyg')],\n    modules: ['react-draft-wysiwyg']\n  }\n});\nconst EditorFieldWrapper = styled.div.withConfig({\n  displayName: \"EditorField__EditorFieldWrapper\",\n  componentId: \"sc-1bmdnz3-0\"\n})([\"width:100%;min-height:240px;display:flex;flex-flow:row wrap;background:#fff;img{width:100%;height:auto;}\"]);\nconst PaddingWrapper = styled.div.withConfig({\n  displayName: \"EditorField__PaddingWrapper\",\n  componentId: \"sc-1bmdnz3-1\"\n})([\"width:100%;padding:15px;\"]);\n\nconst EditorField = ({\n  val,\n  setVal,\n  editMode,\n  currentVal\n}) => {\n  React.useEffect(() => {\n    if (!editMode) return;\n    const blocksFromHTML = convertFromHTML(currentVal);\n    const state = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap);\n    setVal(EditorState.createWithContent(state));\n  }, []);\n\n  const onEditorStateChange = editorState => {\n    // editorState에 값 설정\n    setVal(editorState);\n  };\n\n  const uploadCallback = file => {\n    console.log('FILE', file);\n    return new Promise((resolve, reject) => {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        console.log(reader.result);\n        axios.post('https://wizmedia.me:8080/api/playmango/upload', {\n          blur: false,\n          image: [reader.result]\n        }).then(res => {\n          console.log(res.data[0].fileName);\n          resolve({\n            data: {\n              link: res.data[0].fileName\n            }\n          });\n        }).catch(err => {\n          reject(err);\n        });\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(EditorFieldWrapper, {\n    children: /*#__PURE__*/_jsxDEV(PaddingWrapper, {\n      children: /*#__PURE__*/_jsxDEV(Editor // 에디터와 툴바 모두에 적용되는 클래스\n      , {\n        wrapperClassName: \"wrapper-class\" // 에디터 주변에 적용된 클래스\n        ,\n        editorClassName: \"editor\" // 툴바 주위에 적용된 클래스\n        ,\n        toolbarClassName: \"toolbar-class\" // 툴바 설정\n        ,\n        toolbar: {\n          // inDropdown: 해당 항목과 관련된 항목을 드롭다운으로 나타낼것인지\n          list: {\n            inDropdown: true\n          },\n          textAlign: {\n            inDropdown: true\n          },\n          link: {\n            inDropdown: true\n          },\n          history: {\n            inDropdown: false\n          },\n          image: {\n            uploadCallback\n          }\n        },\n        placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC791\\uC131\\uD574\\uC8FC\\uC138\\uC694.\" // 한국어 설정\n        ,\n        localization: {\n          locale: 'ko'\n        } // 초기값 설정\n        ,\n        editorState: val // 에디터의 값이 변경될 때마다 onEditorStateChange 호출\n        ,\n        onEditorStateChange: onEditorStateChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\nexport default EditorField;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/components/form/EditorField.tsx"],"names":["React","styled","dynamic","EditorState","convertFromHTML","ContentState","axios","Editor","then","mod","ssr","EditorFieldWrapper","div","PaddingWrapper","EditorField","val","setVal","editMode","currentVal","useEffect","blocksFromHTML","state","createFromBlockArray","contentBlocks","entityMap","createWithContent","onEditorStateChange","editorState","uploadCallback","file","console","log","Promise","resolve","reject","reader","FileReader","onloadend","result","post","blur","image","res","data","fileName","link","catch","err","readAsDataURL","list","inDropdown","textAlign","history","locale"],"mappings":"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","sourcesContent":["import React, { Dispatch, SetStateAction } from 'react';\nimport styled from 'styled-components';\nimport dynamic from 'next/dynamic';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { EditorState, convertFromHTML, ContentState } from 'draft-js';\nimport axios from 'axios';\n\nconst Editor: any = dynamic(\n  () => import('react-draft-wysiwyg').then((mod) => mod.Editor),\n  {\n    ssr: false,\n  }\n);\n\nconst EditorFieldWrapper = styled.div`\n  width: 100%;\n  min-height: 240px;\n  display: flex;\n  flex-flow: row wrap;\n  background: #fff;\n  img {\n    width: 100%;\n    height: auto;\n  }\n`;\n\nconst PaddingWrapper = styled.div`\n  width: 100%;\n  padding: 15px;\n`;\n\ninterface Props {\n  val: EditorState;\n  setVal: Dispatch<SetStateAction<EditorState>>;\n  editMode?: boolean;\n  currentVal?: string;\n}\n\nconst EditorField = ({\n  val,\n  setVal,\n  editMode,\n  currentVal,\n}: Props): JSX.Element => {\n  React.useEffect(() => {\n    if (!editMode) return;\n\n    const blocksFromHTML = convertFromHTML(currentVal);\n\n    const state = ContentState.createFromBlockArray(\n      blocksFromHTML.contentBlocks,\n      blocksFromHTML.entityMap\n    );\n\n    setVal(EditorState.createWithContent(state));\n  }, []);\n\n  const onEditorStateChange = (editorState: any) => {\n    // editorState에 값 설정\n    setVal(editorState);\n  };\n\n  const uploadCallback = (file) => {\n    console.log('FILE', file);\n\n    return new Promise((resolve, reject) => {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        console.log(reader.result);\n        axios\n          .post('https://wizmedia.me:8080/api/playmango/upload', {\n            blur: false,\n            image: [reader.result],\n          })\n          .then((res: any) => {\n            console.log(res.data[0].fileName);\n            resolve({ data: { link: res.data[0].fileName } });\n          })\n          .catch((err: any) => {\n            reject(err);\n          });\n      };\n\n      reader.readAsDataURL(file);\n    });\n  };\n\n  return (\n    <EditorFieldWrapper>\n      <PaddingWrapper>\n        <Editor\n          // 에디터와 툴바 모두에 적용되는 클래스\n          wrapperClassName=\"wrapper-class\"\n          // 에디터 주변에 적용된 클래스\n          editorClassName=\"editor\"\n          // 툴바 주위에 적용된 클래스\n          toolbarClassName=\"toolbar-class\"\n          // 툴바 설정\n          toolbar={{\n            // inDropdown: 해당 항목과 관련된 항목을 드롭다운으로 나타낼것인지\n            list: { inDropdown: true },\n            textAlign: { inDropdown: true },\n            link: { inDropdown: true },\n            history: { inDropdown: false },\n            image: { uploadCallback },\n          }}\n          placeholder=\"내용을 작성해주세요.\"\n          // 한국어 설정\n          localization={{\n            locale: 'ko',\n          }}\n          // 초기값 설정\n          editorState={val}\n          // 에디터의 값이 변경될 때마다 onEditorStateChange 호출\n          onEditorStateChange={onEditorStateChange}\n        />\n      </PaddingWrapper>\n    </EditorFieldWrapper>\n  );\n};\n\nexport default EditorField;\n"]},"metadata":{},"sourceType":"module"}