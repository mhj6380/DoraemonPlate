{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/components/contexts/profile/UserProfileProvider.tsx\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport UserProfileContext from \"./UserProfileContext\";\nexport const UserProfileProvider = ({\n  children\n}) => {\n  const {\n    0: ua,\n    1: setUa\n  } = useState(null);\n  const {\n    0: name,\n    1: setName\n  } = useState(null); // fetch user agent and set \"ua\"\n\n  useEffect(() => {\n    if (true) {\n      return;\n    }\n\n    let mounted = true;\n    fetch(\"/api/ua\").then(async res => {\n      if (!mounted || res.status !== 200) {\n        return;\n      }\n\n      setUa(await res.json());\n    });\n    return () => mounted = false;\n  }, []);\n  const data = useMemo(() => ({\n    ua,\n\n    get name() {\n      return name;\n    },\n\n    /** allow setting name from child components */\n    set name(val) {\n      setName(val);\n    }\n\n  }), [ua, name]);\n  return /*#__PURE__*/_jsxDEV(UserProfileContext.Provider, {\n    value: data,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/components/contexts/profile/UserProfileProvider.tsx"],"names":["useState","useEffect","useMemo","UserProfileContext","UserProfileProvider","children","ua","setUa","name","setName","mounted","fetch","then","res","status","json","data","val"],"mappings":";;AAAA,SAAaA,QAAb,EAAuBC,SAAvB,EAAkCC,OAAlC,QAAiD,OAAjD;AAGA,OAAOC,kBAAP,MAA+B,sBAA/B;AAEA,OAAO,MAAMC,mBAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvD,QAAM;AAAA,OAACC,EAAD;AAAA,OAAKC;AAAL,MAAcP,QAAQ,CAAoB,IAApB,CAA5B;AACA,QAAM;AAAA,OAACQ,IAAD;AAAA,OAAOC;AAAP,MAAkBT,QAAQ,CAAS,IAAT,CAAhC,CAFuD,CAIvD;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,cAAmC;AACjC;AACD;;AACD,QAAIS,OAAO,GAAG,IAAd;AACAC,IAAAA,KAAK,CAAC,SAAD,CAAL,CAAiBC,IAAjB,CAAsB,MAAOC,GAAP,IAAe;AACnC,UAAI,CAACH,OAAD,IAAYG,GAAG,CAACC,MAAJ,KAAe,GAA/B,EAAoC;AAClC;AACD;;AACDP,MAAAA,KAAK,CAAC,MAAMM,GAAG,CAACE,IAAJ,EAAP,CAAL;AACD,KALD;AAMA,WAAO,MAAOL,OAAO,GAAG,KAAxB;AACD,GAZQ,EAYN,EAZM,CAAT;AAcA,QAAMM,IAAsB,GAAGd,OAAO,CACpC,OAAO;AACLI,IAAAA,EADK;;AAEL,QAAIE,IAAJ,GAAW;AACT,aAAOA,IAAP;AACD,KAJI;;AAKL;AACA,QAAIA,IAAJ,CAASS,GAAT,EAAc;AACZR,MAAAA,OAAO,CAACQ,GAAD,CAAP;AACD;;AARI,GAAP,CADoC,EAWpC,CAACX,EAAD,EAAKE,IAAL,CAXoC,CAAtC;AAcA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEQ,IAApC;AAAA,cACGX;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAtCM","sourcesContent":["import { FC, useState, useEffect, useMemo } from \"react\";\r\n\r\nimport { UserProfileIface } from \"../../../shared/UserProfileIface\";\r\nimport UserProfileContext from \"./UserProfileContext\";\r\n\r\nexport const UserProfileProvider: FC = ({ children }) => {\r\n  const [ua, setUa] = useState<IUAParser.IResult>(null);\r\n  const [name, setName] = useState<string>(null);\r\n\r\n  // fetch user agent and set \"ua\"\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") {\r\n      return;\r\n    }\r\n    let mounted = true;\r\n    fetch(\"/api/ua\").then(async (res) => {\r\n      if (!mounted || res.status !== 200) {\r\n        return;\r\n      }\r\n      setUa(await res.json());\r\n    });\r\n    return () => (mounted = false);\r\n  }, []);\r\n\r\n  const data: UserProfileIface = useMemo(\r\n    () => ({\r\n      ua,\r\n      get name() {\r\n        return name;\r\n      },\r\n      /** allow setting name from child components */\r\n      set name(val) {\r\n        setName(val);\r\n      },\r\n    }),\r\n    [ua, name]\r\n  );\r\n\r\n  return (\r\n    <UserProfileContext.Provider value={data}>\r\n      {children}\r\n    </UserProfileContext.Provider>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}