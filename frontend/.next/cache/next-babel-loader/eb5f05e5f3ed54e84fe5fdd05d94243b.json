{"ast":null,"code":"import axios from 'axios';\n\nvar baseURL = function () {\n  if (true) {\n    return 'http://localhost:8080/';\n  } else {\n    return '/';\n  }\n}();\n\nvar progress = 0; // 0 ~ 100, 요청 진행률\n\nvar timerId = null; // timer id\n\nfunction setProgress(value) {\n  progress = value;\n  var myWindow = window;\n  myWindow.progressbar.onChange(progress); // ProgressContainer의 함수 호출   \n}\n\nfunction timer() {\n  if (progress < 98) {\n    var diff = 100 - progress;\n    var inc = diff / (10 + progress * (1 + progress / 100)); // 증가값\n\n    setProgress(progress + inc);\n  }\n\n  timerId = setTimeout(timer, 50); // 50 ms 단위로 timer 재귀호출\n}\n\nvar defaultClient = axios.create({\n  baseURL: baseURL,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json; charset=utf-8'\n  }\n});\ndefaultClient.defaults.timeout = 3000;\ndefaultClient.interceptors.request.use(function (config) {\n  // 요청 인터셉터\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ndefaultClient.interceptors.response.use(function (response) {\n  // 응답 인터셉터\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\ndefaultClient.interceptors.request.use(function (config) {\n  setProgress(0);\n  timer(); // HTTP 요청시 timer 실행\n\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\ndefaultClient.interceptors.response.use(function (response) {\n  if (timerId) {\n    clearTimeout(timerId); // HTTP 응답시 timer 해제\n\n    timerId = null;\n  }\n\n  setProgress(100); // 진행도: 100 = 요청/응답 완료\n\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\nexport default defaultClient;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/util/axios.ts"],"names":["axios","baseURL","progress","timerId","setProgress","value","myWindow","window","progressbar","onChange","timer","diff","inc","setTimeout","defaultClient","create","headers","defaults","timeout","interceptors","request","use","config","error","Promise","reject","response","clearTimeout"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,OAAO,GAAI,YAAM;AACrB,YAA4C;AAC1C,WAAO,wBAAP;AACD,GAFD,MAEQ;AACN,WAAO,GAAP;AACD;AACF,CANe,EAAhB;;AAQA,IAAIC,QAAQ,GAAG,CAAf,C,CAAyB;;AACzB,IAAIC,OAAO,GAAG,IAAd,C,CAA2B;;AAE3B,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAC1BH,EAAAA,QAAQ,GAAGG,KAAX;AACA,MAAMC,QAAQ,GAAGC,MAAjB;AACAD,EAAAA,QAAQ,CAACE,WAAT,CAAqBC,QAArB,CAA8BP,QAA9B,EAH0B,CAGe;AAC1C;;AAED,SAASQ,KAAT,GAAiB;AACf,MAAIR,QAAQ,GAAG,EAAf,EAAmB;AACjB,QAAMS,IAAI,GAAG,MAAMT,QAAnB;AACA,QAAMU,GAAG,GAAGD,IAAI,IAAI,KAAKT,QAAQ,IAAI,IAAIA,QAAQ,GAAG,GAAnB,CAAjB,CAAhB,CAFiB,CAE0C;;AAC3DE,IAAAA,WAAW,CAACF,QAAQ,GAAGU,GAAZ,CAAX;AACD;;AACDT,EAAAA,OAAO,GAAGU,UAAU,CAACH,KAAD,EAAQ,EAAR,CAApB,CANe,CAMkB;AAClC;;AAGD,IAAMI,aAAa,GAAGd,KAAK,CAACe,MAAN,CAAa;AACjCd,EAAAA,OAAO,EAAPA,OADiC;AAEjCe,EAAAA,OAAO,EAAE;AACP,cAAU,kBADH;AAEP,oBAAgB;AAFT;AAFwB,CAAb,CAAtB;AAQAF,aAAa,CAACG,QAAd,CAAuBC,OAAvB,GAAiC,IAAjC;AAEAJ,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,UAAUC,MAAV,EAAkB;AACvD;AACA,SAAOA,MAAP;AACD,CAHD,EAGG,UAAUC,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CALD;AAOAT,aAAa,CAACK,YAAd,CAA2BO,QAA3B,CAAoCL,GAApC,CAAwC,UAAUK,QAAV,EAAoB;AAC1D;AACA,SAAOA,QAAP;AACD,CAHD,EAGG,UAAUH,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CALD;AAOAT,aAAa,CAACK,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuC,UAAUC,MAAV,EAAkB;AACvDlB,EAAAA,WAAW,CAAC,CAAD,CAAX;AACAM,EAAAA,KAAK,GAFkD,CAE/B;;AACxB,SAAOY,MAAP;AACD,CAJD,EAIG,UAAUC,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAND;AAQAT,aAAa,CAACK,YAAd,CAA2BO,QAA3B,CAAoCL,GAApC,CAAwC,UAAUK,QAAV,EAAoB;AAC1D,MAAIvB,OAAJ,EAAa;AACXwB,IAAAA,YAAY,CAACxB,OAAD,CAAZ,CADW,CACe;;AAC1BA,IAAAA,OAAO,GAAG,IAAV;AACD;;AACDC,EAAAA,WAAW,CAAC,GAAD,CAAX,CAL0D,CAK7B;;AAC7B,SAAOsB,QAAP;AACD,CAPD,EAOG,UAAUH,KAAV,EAAiB;AAClB,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CATD;AAYA,eAAeT,aAAf","sourcesContent":["import axios from 'axios';\n \nconst baseURL = (() => {\n  if (process.env.NODE_ENV === 'development') {\n    return 'http://localhost:8080/' \n  }  else {\n    return '/'\n  }\n})(); \n\nlet progress = 0;        // 0 ~ 100, 요청 진행률\nlet timerId = null;        // timer id\n \nfunction setProgress(value) {\n  progress = value;\n  const myWindow = window as any;\n  myWindow.progressbar.onChange(progress); // ProgressContainer의 함수 호출   \n}\n \nfunction timer() {\n  if (progress < 98) {\n    const diff = 100 - progress;\n    const inc = diff / (10 + progress * (1 + progress / 100)); // 증가값\n    setProgress(progress + inc);\n  }\n  timerId = setTimeout(timer, 50); // 50 ms 단위로 timer 재귀호출\n}\n \n\nconst defaultClient = axios.create({\n  baseURL,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json; charset=utf-8',\n  }\n})\n \ndefaultClient.defaults.timeout = 3000;\n \ndefaultClient.interceptors.request.use(function (config) {\n  // 요청 인터셉터\n  return config\n}, function (error) {\n  return Promise.reject(error);\n});\n \ndefaultClient.interceptors.response.use(function (response) {\n  // 응답 인터셉터\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\n \ndefaultClient.interceptors.request.use(function (config) {\n  setProgress(0);\n  timer();                // HTTP 요청시 timer 실행\n  return config\n}, function (error) {\n  return Promise.reject(error);\n});\n \ndefaultClient.interceptors.response.use(function (response) {\n  if (timerId) {\n    clearTimeout(timerId);    // HTTP 응답시 timer 해제\n    timerId = null;\n  }\n  setProgress(100);            // 진행도: 100 = 요청/응답 완료\n  return response;\n}, function (error) {\n  return Promise.reject(error);\n});\n\n\nexport default defaultClient;\n"]},"metadata":{},"sourceType":"module"}