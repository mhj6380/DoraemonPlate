{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/pages/dm/[partner_id].tsx\";\nimport React, { useEffect, useState } from 'react';\nimport TransitionLayout from \"components/layout/TransitionLayout\";\nimport { useRouter } from \"next/router\";\nimport styled from \"styled-components\";\nimport { useChatDispatch } from \"lib/providers/chatProvider\";\nimport ChatList from 'components/chat/ChatList';\nimport ChatForm from 'components/chat/ChatForm';\nimport { useChatState } from 'lib/providers/chatProvider';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport dayjs from 'dayjs';\nconst DirectMessageWrapper = styled.div.withConfig({\n  displayName: \"partner_id__DirectMessageWrapper\",\n  componentId: \"sc-4pw1eg-0\"\n})([\"width:100%;height:100%;display:flex;flex-flow:row wrap;\"]);\n\nconst DirectMessage = ({}) => {\n  const router = useRouter();\n  const {\n    partner_id\n  } = router.query;\n  const dispatch = useChatDispatch();\n  const chat = useChatState();\n  const {\n    0: message,\n    1: setMessage\n  } = useState('');\n  const me = useAuthState();\n  const usersArr = [me.userInfo.user_id, partner_id];\n  usersArr.sort();\n  const room_key = `${usersArr[0]}:${usersArr[1]}`;\n  useEffect(() => {\n    if (!partner_id) return;\n    dispatch({\n      type: \"JOIN_ROOM\",\n      payload: room_key\n    }); // return () => {\n    //   dispatch({ type: \"LEAVE_ROOM\", payload: room_key })   \n    // };\n  }, []);\n\n  const handleSendMessage = e => {\n    e.preventDefault();\n    const payload = {\n      room_key,\n      nickname: me.userInfo.nickname,\n      profile: me.userInfo.profile,\n      insert_datetime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n      message,\n      source: '',\n      message_type: 'text',\n      from_user: me.userInfo.user_id,\n      to_user: partner_id.toString()\n    };\n    dispatch({\n      type: \"SEND_MESSAGE\",\n      payload\n    });\n    setMessage('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(TransitionLayout, {\n    title: \"\\uCC44\\uD305\",\n    requiredLogin: true,\n    children: /*#__PURE__*/_jsxDEV(DirectMessageWrapper, {\n      children: [\"partner_id : \", partner_id, JSON.stringify(me.userInfo.user_id), /*#__PURE__*/_jsxDEV(ChatList, {\n        datas: chat.chatList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatForm, {\n        message: message,\n        setMessage: setMessage,\n        handleSendMessage: handleSendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\nexport default DirectMessage;","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/pages/dm/[partner_id].tsx"],"names":["React","useEffect","useState","TransitionLayout","useRouter","styled","useChatDispatch","ChatList","ChatForm","useChatState","useAuthState","dayjs","DirectMessageWrapper","div","DirectMessage","router","partner_id","query","dispatch","chat","message","setMessage","me","usersArr","userInfo","user_id","sort","room_key","type","payload","handleSendMessage","e","preventDefault","nickname","profile","insert_datetime","format","source","message_type","from_user","to_user","toString","JSON","stringify","chatList"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from 'react';\nimport TransitionLayout from \"components/layout/TransitionLayout\";\nimport { useRouter } from \"next/router\";\nimport styled from \"styled-components\";\nimport { useChatDispatch } from \"lib/providers/chatProvider\"; \nimport ChatList from 'components/chat/ChatList';\nimport ChatForm from 'components/chat/ChatForm'; \nimport { useChatState } from 'lib/providers/chatProvider';\nimport { TChatMessage } from 'types/chat';\nimport { useAuthState } from 'lib/providers/authProvider';\nimport dayjs from 'dayjs';\n\nconst DirectMessageWrapper = styled.div`\n  width:100%;\n  height:100%; \n  display:flex;\n  flex-flow: row wrap;\n`;\n\ninterface Props { \n\n}\n\nconst DirectMessage = ({  }:Props):JSX.Element=> {\n  const router = useRouter()\n  const { partner_id } = router.query; \n  const dispatch = useChatDispatch();\n  const chat = useChatState();\n  const [message, setMessage] = useState('');\n  const me = useAuthState();\n\n  const usersArr = [me.userInfo.user_id, partner_id];\n  usersArr.sort();\n  const room_key = `${usersArr[0]}:${usersArr[1]}`;\n\n  useEffect(() => {\n    if (!partner_id) return;\n    \n    dispatch({ type: \"JOIN_ROOM\", payload: room_key })   \n    // return () => {\n    //   dispatch({ type: \"LEAVE_ROOM\", payload: room_key })   \n    // };\n  }, []);\n\n  const handleSendMessage = (e:any):void => {\n    e.preventDefault();\n   \n    const payload: TChatMessage = {\n        room_key,   \n        nickname: me.userInfo.nickname, \n        profile: me.userInfo.profile, \n        insert_datetime: dayjs().format('YYYY-MM-DD HH:mm:ss'),\n        message,  \n        source: '',\n        message_type: 'text',\n        from_user: me.userInfo.user_id,  \n        to_user:partner_id.toString() \n    }  \n\n    dispatch({type:\"SEND_MESSAGE\", payload})   \n    \n    setMessage(''); \n  }\n\n  return (\n    <TransitionLayout title=\"채팅\" requiredLogin={true}>  \n    <DirectMessageWrapper>\n        partner_id : {partner_id}  \n        { JSON.stringify(me.userInfo.user_id)}\n        <ChatList datas={chat.chatList}/> \n        <ChatForm message={message} setMessage={setMessage} handleSendMessage={handleSendMessage}/>\n     </DirectMessageWrapper>\n   </TransitionLayout> \n  )\n\n} \n\nexport default DirectMessage;"]},"metadata":{},"sourceType":"module"}