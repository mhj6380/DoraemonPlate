{"ast":null,"code":"import _toConsumableArray from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/munhagju/DoraemonPlateV1/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx\",\n    _this = this,\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useReducer, useContext, createContext, useEffect } from \"react\";\nimport { SocketContext } from './socketContext'; // import Cookies from \"js-cookie\";\n// import Axios from \"axios\";\n// 필요한 타입들을 미리 선언 \n// 상태를 위한 타입\n\n// Context 만들기\nvar ChatStateContext = /*#__PURE__*/createContext(null);\nvar ChatDispatchContext = /*#__PURE__*/createContext(null); // 리듀서\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case \"SET_ROOM_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        roomList: action.payload // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n\n      });\n\n    case \"SET_CHAT_LIST\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        inRoomKey: action.inRoomKey,\n        chatList: action.payload\n      });\n\n    case \"PUSH_CHAT_LIST\":\n      var newChats = [].concat(_toConsumableArray(state.chatList), [action.payload]);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        chatList: newChats\n      });\n\n    default:\n      throw new Error(\"Unhandled action\");\n  }\n} // AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\n\n\nexport var ChatProvider = function ChatProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  var socket = useContext(SocketContext);\n  useEffect(function () {\n    console.log(\"CHAT PROVIDER\", socket);\n  }, []);\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = [];\n\n  var _useReducer = useReducer(reducer, {\n    inRoomKey: inRoomKey,\n    roomList: roomList,\n    chatList: chatList\n  }),\n      state = _useReducer[0],\n      dispatch = _useReducer[1];\n\n  return /*#__PURE__*/_jsxDEV(ChatStateContext.Provider, {\n    value: state,\n    children: /*#__PURE__*/_jsxDEV(ChatDispatchContext.Provider, {\n      value: dispatch,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, _this);\n}; // state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\n\n_s(ChatProvider, \"ZqYg6We6aLI3DxMxuO5GoBLsQtI=\");\n\n_c = ChatProvider;\nexport function useChatState() {\n  _s2();\n\n  var state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return state;\n}\n\n_s2(useChatState, \"kdLImxeHm3898p7tqgy8Fclg5s8=\");\n\nexport function useChatDispatch() {\n  _s3();\n\n  var dispatch = useContext(ChatDispatchContext);\n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n\n  return dispatch;\n}\n\n_s3(useChatDispatch, \"kCU+r/6VuXUfg74P0SIOBSNFld8=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"sources":["/Users/munhagju/DoraemonPlateV1/frontend/lib/providers/chatProvider.tsx"],"names":["React","useReducer","useContext","createContext","useEffect","SocketContext","ChatStateContext","ChatDispatchContext","reducer","state","action","type","roomList","payload","inRoomKey","chatList","newChats","Error","ChatProvider","children","socket","console","log","dispatch","useChatState","useChatDispatch"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,EAAwCC,aAAxC,EAAiEC,SAAjE,QAAkF,OAAlF;AAEA,SAAQC,aAAR,QAA4B,iBAA5B,C,CACA;AACA;AACA;AAEA;;AAgBA;AACA,IAAMC,gBAAgB,gBAAGH,aAAa,CAAa,IAAb,CAAtC;AACA,IAAMI,mBAAmB,gBAAGJ,aAAa,CAAsB,IAAtB,CAAzC,C,CAEA;;AACA,SAASK,OAAT,CAAiBC,KAAjB,EAA+BC,MAA/B,EAAsD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,6CACKF,KADL;AAEEG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFnB,CAE4B;;AAF5B;;AAMF,SAAK,eAAL;AACE,6CACKJ,KADL;AAEEK,QAAAA,SAAS,EAAEJ,MAAM,CAACI,SAFpB;AAGEC,QAAAA,QAAQ,EAAEL,MAAM,CAACG;AAHnB;;AAMA,SAAK,gBAAL;AACA,UAAMG,QAAQ,gCAAOP,KAAK,CAACM,QAAb,IAAuBL,MAAM,CAACG,OAA9B,EAAd;AACA,6CACKJ,KADL;AAEEM,QAAAA,QAAQ,EAAEC;AAFZ;;AAKF;AACE,YAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AAvBJ;AAyBD,C,CAED;AACA;;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAiD;AAAA;;AAAA,MAA9CC,QAA8C,QAA9CA,QAA8C;AAC3E;AACA,MAAMC,MAAM,GAAGlB,UAAU,CAACG,aAAD,CAAzB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACdiB,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,MAA7B;AACD,GAFQ,EAEP,EAFO,CAAT;AAIA,MAAIN,SAAS,GAAG,IAAhB;AACA,MAAIF,QAAQ,GAAG,EAAf;AACA,MAAIG,QAAQ,GAAG,EAAf;;AAV2E,oBAYjDd,UAAU,CAACO,OAAD,EAAU;AAC5CM,IAAAA,SAAS,EAATA,SAD4C;AAE5CF,IAAAA,QAAQ,EAARA,QAF4C;AAG5CG,IAAAA,QAAQ,EAARA;AAH4C,GAAV,CAZuC;AAAA,MAYpEN,KAZoE;AAAA,MAY7Dc,QAZ6D;;AAkB3E,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAEd,KAAlC;AAAA,2BACE,QAAC,mBAAD,CAAqB,QAArB;AAA8B,MAAA,KAAK,EAAEc,QAArC;AAAA,gBACGJ;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAOD,CAzBM,C,CA2BP;;GA3BaD,Y;;KAAAA,Y;AA4Bb,OAAO,SAASM,YAAT,GAAwB;AAAA;;AAC7B,MAAMf,KAAK,GAAGP,UAAU,CAACI,gBAAD,CAAxB;AACA,MAAI,CAACG,KAAL,EAAY,MAAM,IAAIQ,KAAJ,CAAU,0BAAV,CAAN,CAFiB,CAE4B;;AACzD,SAAOR,KAAP;AACD;;IAJee,Y;;AAMhB,OAAO,SAASC,eAAT,GAA2B;AAAA;;AAChC,MAAMF,QAAQ,GAAGrB,UAAU,CAACK,mBAAD,CAA3B;AACA,MAAI,CAACgB,QAAL,EAAe,MAAM,IAAIN,KAAJ,CAAU,0BAAV,CAAN,CAFiB,CAE4B;;AAC5D,SAAOM,QAAP;AACD;;IAJeE,e","sourcesContent":["import React, { useReducer, useContext, createContext, Dispatch, useEffect } from \"react\";\nimport { TRoom, TChatMessage } from \"../../types/chat\"; \nimport {SocketContext} from './socketContext';  \n// import Cookies from \"js-cookie\";\n// import Axios from \"axios\";\n// 필요한 타입들을 미리 선언 \n\n// 상태를 위한 타입\ntype State = { \n  inRoomKey: string;\n  roomList: TRoom[];\n  chatList: TChatMessage[]; \n};\n\n// 모든 액션들을 위한 타입\ntype Action =\n  | { type: \"SET_ROOM_LIST\"; payload: TRoom[] }\n  | { type: \"SET_CHAT_LIST\"; payload: TChatMessage[]; inRoomKey: string }\n  | { type: \"PUSH_CHAT_LIST\"; payload: TChatMessage;};  \n \n// 디스패치를 위한 타입 (Dispatch 를 리액트에서 불러올 수 있음), 액션들의 타입을 Dispatch 의 Generics로 설정\ntype AuthDispatch = Dispatch<Action>;\n\n// Context 만들기\nconst ChatStateContext = createContext<any | null>(null);\nconst ChatDispatchContext = createContext<AuthDispatch | null>(null);\n\n// 리듀서\nfunction reducer(state: State, action: Action): State {\n  switch (action.type) {\n    case \"SET_ROOM_LIST\":\n      return {\n        ...state,\n        roomList: action.payload, // text가 자동완성되며, string 타입인걸 알 수 있습니다.\n      };\n\n    \n    case \"SET_CHAT_LIST\":  \n      return {\n        ...state,\n        inRoomKey: action.inRoomKey,\n        chatList: action.payload,  \n      };\n\n      case \"PUSH_CHAT_LIST\":  \n      const newChats = [...state.chatList, action.payload];\n      return {\n        ...state,\n        chatList: newChats,  \n      };\n    \n    default:\n      throw new Error(\"Unhandled action\");\n  }\n}\n\n// AuthProvider 에서 useReduer를 사용하고\n// AuthStateContext.Provider 와 SampleDispatchContext.Provider 로 children 을 감싸서 반환합니다.\nexport const ChatProvider = ({ children }: { children: React.ReactNode }) => { \n  // const accessToken = Cookies.get(\"accessToken\"); // => 'value'\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    console.log(\"CHAT PROVIDER\", socket); \n  },[])\n\n  var inRoomKey = null;\n  var roomList = [];\n  var chatList = []; \n\n  const [state, dispatch] = useReducer(reducer, {\n    inRoomKey,\n    roomList,  \n    chatList\n  });\n\n  return (\n    <ChatStateContext.Provider value={state}>\n      <ChatDispatchContext.Provider value={dispatch}> \n        {children}\n      </ChatDispatchContext.Provider>\n    </ChatStateContext.Provider>\n  );\n};\n\n// state 와 dispatch 를 쉽게 사용하기 위한 커스텀 Hooks\nexport function useChatState() {\n  const state = useContext(ChatStateContext);\n  if (!state) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return state;\n} \n \nexport function useChatDispatch() { \n  const dispatch = useContext(ChatDispatchContext); \n  if (!dispatch) throw new Error(\"Cannot find AuthProvider\"); // 유효하지 않을땐 에러를 발생\n  return dispatch;\n}\n"]},"metadata":{},"sourceType":"module"}